Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTS
    NOT

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> empty
Rule 3     statement -> assignment
Rule 4     statement -> if
Rule 5     statement -> while
Rule 6     statement -> for
Rule 7     statement -> expr
Rule 8     statement -> CONTINUE
Rule 9     statement -> BREAK
Rule 10    for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
Rule 11    params -> num_or_id
Rule 12    params -> num_or_id SEP num_or_id
Rule 13    params -> num_or_id SEP num_or_id SEP num_or_id
Rule 14    while -> WHILE expr COLON LBRACE statements RBRACE
Rule 15    if -> IF expr COLON LBRACE statements RBRACE elif
Rule 16    elif -> ELIF expr COLON LBRACE statements RBRACE elif
Rule 17    elif -> else
Rule 18    else -> ELSE COLON LBRACE statements RBRACE
Rule 19    else -> empty
Rule 20    assignment -> ID EQ expr
Rule 21    assignment -> ID PLUS_EQUAL expr
Rule 22    assignment -> ID MINUS_EQUAL expr
Rule 23    assignment -> ID TIMES_EQUAL expr
Rule 24    assignment -> ID DIV_EQUAL expr
Rule 25    expr -> MINUS expr
Rule 26    expr -> PLUS expr
Rule 27    expr -> expr PLUS expr
Rule 28    expr -> expr MINUS expr
Rule 29    expr -> expr TIMES expr
Rule 30    expr -> expr DIV expr
Rule 31    expr -> expr MOD expr
Rule 32    expr -> expr AND expr
Rule 33    expr -> expr OR expr
Rule 34    expr -> expr LT expr
Rule 35    expr -> expr LTE expr
Rule 36    expr -> expr GT expr
Rule 37    expr -> expr GTE expr
Rule 38    expr -> expr EQU expr
Rule 39    expr -> expr NEQU expr
Rule 40    expr -> ID
Rule 41    expr -> NUMBER
Rule 42    expr -> TRUE
Rule 43    expr -> FALSE
Rule 44    expr -> LPRAN expr RPRAN
Rule 45    num_or_id -> NUMBER
Rule 46    num_or_id -> ID
Rule 47    empty -> <empty>

Terminals, with rules where they appear

AND                  : 32
BREAK                : 9
COLON                : 10 14 15 16 18
COMMENTS             : 
CONTINUE             : 8
DIV                  : 30
DIV_EQUAL            : 24
ELIF                 : 16
ELSE                 : 18
EQ                   : 20
EQU                  : 38
FALSE                : 43
FOR                  : 10
GT                   : 36
GTE                  : 37
ID                   : 10 20 21 22 23 24 40 46
IF                   : 15
IN                   : 10
LBRACE               : 10 14 15 16 18
LPRAN                : 10 44
LT                   : 34
LTE                  : 35
MINUS                : 25 28
MINUS_EQUAL          : 22
MOD                  : 31
NEQU                 : 39
NOT                  : 
NUMBER               : 41 45
OR                   : 33
PLUS                 : 26 27
PLUS_EQUAL           : 21
RANGE                : 10
RBRACE               : 10 14 15 16 18
RPRAN                : 10 44
SEP                  : 12 13 13
TIMES                : 29
TIMES_EQUAL          : 23
TRUE                 : 42
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

assignment           : 3
elif                 : 15 16
else                 : 17
empty                : 2 19
expr                 : 7 14 15 16 20 21 22 23 24 25 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 44
for                  : 6
if                   : 4
num_or_id            : 11 12 12 13 13 13
params               : 10
statement            : 1
statements           : 1 10 14 15 16 18 0
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)
    $end            reduce using rule 47 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8

state 2

    (2) statements -> empty .

    CONTINUE        reduce using rule 2 (statements -> empty .)
    BREAK           reduce using rule 2 (statements -> empty .)
    ID              reduce using rule 2 (statements -> empty .)
    IF              reduce using rule 2 (statements -> empty .)
    WHILE           reduce using rule 2 (statements -> empty .)
    FOR             reduce using rule 2 (statements -> empty .)
    MINUS           reduce using rule 2 (statements -> empty .)
    PLUS            reduce using rule 2 (statements -> empty .)
    NUMBER          reduce using rule 2 (statements -> empty .)
    TRUE            reduce using rule 2 (statements -> empty .)
    FALSE           reduce using rule 2 (statements -> empty .)
    LPRAN           reduce using rule 2 (statements -> empty .)
    $end            reduce using rule 2 (statements -> empty .)
    RBRACE          reduce using rule 2 (statements -> empty .)


state 3

    (1) statements -> statements statement .

    CONTINUE        reduce using rule 1 (statements -> statements statement .)
    BREAK           reduce using rule 1 (statements -> statements statement .)
    ID              reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    MINUS           reduce using rule 1 (statements -> statements statement .)
    PLUS            reduce using rule 1 (statements -> statements statement .)
    NUMBER          reduce using rule 1 (statements -> statements statement .)
    TRUE            reduce using rule 1 (statements -> statements statement .)
    FALSE           reduce using rule 1 (statements -> statements statement .)
    LPRAN           reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    RBRACE          reduce using rule 1 (statements -> statements statement .)


state 4

    (3) statement -> assignment .

    CONTINUE        reduce using rule 3 (statement -> assignment .)
    BREAK           reduce using rule 3 (statement -> assignment .)
    ID              reduce using rule 3 (statement -> assignment .)
    IF              reduce using rule 3 (statement -> assignment .)
    WHILE           reduce using rule 3 (statement -> assignment .)
    FOR             reduce using rule 3 (statement -> assignment .)
    MINUS           reduce using rule 3 (statement -> assignment .)
    PLUS            reduce using rule 3 (statement -> assignment .)
    NUMBER          reduce using rule 3 (statement -> assignment .)
    TRUE            reduce using rule 3 (statement -> assignment .)
    FALSE           reduce using rule 3 (statement -> assignment .)
    LPRAN           reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)
    RBRACE          reduce using rule 3 (statement -> assignment .)


state 5

    (4) statement -> if .

    CONTINUE        reduce using rule 4 (statement -> if .)
    BREAK           reduce using rule 4 (statement -> if .)
    ID              reduce using rule 4 (statement -> if .)
    IF              reduce using rule 4 (statement -> if .)
    WHILE           reduce using rule 4 (statement -> if .)
    FOR             reduce using rule 4 (statement -> if .)
    MINUS           reduce using rule 4 (statement -> if .)
    PLUS            reduce using rule 4 (statement -> if .)
    NUMBER          reduce using rule 4 (statement -> if .)
    TRUE            reduce using rule 4 (statement -> if .)
    FALSE           reduce using rule 4 (statement -> if .)
    LPRAN           reduce using rule 4 (statement -> if .)
    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (5) statement -> while .

    CONTINUE        reduce using rule 5 (statement -> while .)
    BREAK           reduce using rule 5 (statement -> while .)
    ID              reduce using rule 5 (statement -> while .)
    IF              reduce using rule 5 (statement -> while .)
    WHILE           reduce using rule 5 (statement -> while .)
    FOR             reduce using rule 5 (statement -> while .)
    MINUS           reduce using rule 5 (statement -> while .)
    PLUS            reduce using rule 5 (statement -> while .)
    NUMBER          reduce using rule 5 (statement -> while .)
    TRUE            reduce using rule 5 (statement -> while .)
    FALSE           reduce using rule 5 (statement -> while .)
    LPRAN           reduce using rule 5 (statement -> while .)
    $end            reduce using rule 5 (statement -> while .)
    RBRACE          reduce using rule 5 (statement -> while .)


state 7

    (6) statement -> for .

    CONTINUE        reduce using rule 6 (statement -> for .)
    BREAK           reduce using rule 6 (statement -> for .)
    ID              reduce using rule 6 (statement -> for .)
    IF              reduce using rule 6 (statement -> for .)
    WHILE           reduce using rule 6 (statement -> for .)
    FOR             reduce using rule 6 (statement -> for .)
    MINUS           reduce using rule 6 (statement -> for .)
    PLUS            reduce using rule 6 (statement -> for .)
    NUMBER          reduce using rule 6 (statement -> for .)
    TRUE            reduce using rule 6 (statement -> for .)
    FALSE           reduce using rule 6 (statement -> for .)
    LPRAN           reduce using rule 6 (statement -> for .)
    $end            reduce using rule 6 (statement -> for .)
    RBRACE          reduce using rule 6 (statement -> for .)


state 8

    (7) statement -> expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 7 (statement -> expr .)
    BREAK           reduce using rule 7 (statement -> expr .)
    ID              reduce using rule 7 (statement -> expr .)
    IF              reduce using rule 7 (statement -> expr .)
    WHILE           reduce using rule 7 (statement -> expr .)
    FOR             reduce using rule 7 (statement -> expr .)
    NUMBER          reduce using rule 7 (statement -> expr .)
    TRUE            reduce using rule 7 (statement -> expr .)
    FALSE           reduce using rule 7 (statement -> expr .)
    LPRAN           reduce using rule 7 (statement -> expr .)
    $end            reduce using rule 7 (statement -> expr .)
    RBRACE          reduce using rule 7 (statement -> expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 7 (statement -> expr .) ]
  ! PLUS            [ reduce using rule 7 (statement -> expr .) ]


state 9

    (8) statement -> CONTINUE .

    CONTINUE        reduce using rule 8 (statement -> CONTINUE .)
    BREAK           reduce using rule 8 (statement -> CONTINUE .)
    ID              reduce using rule 8 (statement -> CONTINUE .)
    IF              reduce using rule 8 (statement -> CONTINUE .)
    WHILE           reduce using rule 8 (statement -> CONTINUE .)
    FOR             reduce using rule 8 (statement -> CONTINUE .)
    MINUS           reduce using rule 8 (statement -> CONTINUE .)
    PLUS            reduce using rule 8 (statement -> CONTINUE .)
    NUMBER          reduce using rule 8 (statement -> CONTINUE .)
    TRUE            reduce using rule 8 (statement -> CONTINUE .)
    FALSE           reduce using rule 8 (statement -> CONTINUE .)
    LPRAN           reduce using rule 8 (statement -> CONTINUE .)
    $end            reduce using rule 8 (statement -> CONTINUE .)
    RBRACE          reduce using rule 8 (statement -> CONTINUE .)


state 10

    (9) statement -> BREAK .

    CONTINUE        reduce using rule 9 (statement -> BREAK .)
    BREAK           reduce using rule 9 (statement -> BREAK .)
    ID              reduce using rule 9 (statement -> BREAK .)
    IF              reduce using rule 9 (statement -> BREAK .)
    WHILE           reduce using rule 9 (statement -> BREAK .)
    FOR             reduce using rule 9 (statement -> BREAK .)
    MINUS           reduce using rule 9 (statement -> BREAK .)
    PLUS            reduce using rule 9 (statement -> BREAK .)
    NUMBER          reduce using rule 9 (statement -> BREAK .)
    TRUE            reduce using rule 9 (statement -> BREAK .)
    FALSE           reduce using rule 9 (statement -> BREAK .)
    LPRAN           reduce using rule 9 (statement -> BREAK .)
    $end            reduce using rule 9 (statement -> BREAK .)
    RBRACE          reduce using rule 9 (statement -> BREAK .)


state 11

    (20) assignment -> ID . EQ expr
    (21) assignment -> ID . PLUS_EQUAL expr
    (22) assignment -> ID . MINUS_EQUAL expr
    (23) assignment -> ID . TIMES_EQUAL expr
    (24) assignment -> ID . DIV_EQUAL expr
    (40) expr -> ID .

    EQ              shift and go to state 34
    PLUS_EQUAL      shift and go to state 35
    MINUS_EQUAL     shift and go to state 36
    TIMES_EQUAL     shift and go to state 37
    DIV_EQUAL       shift and go to state 38
    PLUS            reduce using rule 40 (expr -> ID .)
    MINUS           reduce using rule 40 (expr -> ID .)
    TIMES           reduce using rule 40 (expr -> ID .)
    DIV             reduce using rule 40 (expr -> ID .)
    MOD             reduce using rule 40 (expr -> ID .)
    AND             reduce using rule 40 (expr -> ID .)
    OR              reduce using rule 40 (expr -> ID .)
    LT              reduce using rule 40 (expr -> ID .)
    LTE             reduce using rule 40 (expr -> ID .)
    GT              reduce using rule 40 (expr -> ID .)
    GTE             reduce using rule 40 (expr -> ID .)
    EQU             reduce using rule 40 (expr -> ID .)
    NEQU            reduce using rule 40 (expr -> ID .)
    CONTINUE        reduce using rule 40 (expr -> ID .)
    BREAK           reduce using rule 40 (expr -> ID .)
    ID              reduce using rule 40 (expr -> ID .)
    IF              reduce using rule 40 (expr -> ID .)
    WHILE           reduce using rule 40 (expr -> ID .)
    FOR             reduce using rule 40 (expr -> ID .)
    NUMBER          reduce using rule 40 (expr -> ID .)
    TRUE            reduce using rule 40 (expr -> ID .)
    FALSE           reduce using rule 40 (expr -> ID .)
    LPRAN           reduce using rule 40 (expr -> ID .)
    $end            reduce using rule 40 (expr -> ID .)
    RBRACE          reduce using rule 40 (expr -> ID .)


state 12

    (15) if -> IF . expr COLON LBRACE statements RBRACE elif
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 39

state 13

    (14) while -> WHILE . expr COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 41

state 14

    (10) for -> FOR . ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    ID              shift and go to state 42


state 15

    (44) expr -> LPRAN . expr RPRAN
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 43

state 16

    (25) expr -> MINUS . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 44

state 17

    (26) expr -> PLUS . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 45

state 18

    (41) expr -> NUMBER .

    PLUS            reduce using rule 41 (expr -> NUMBER .)
    MINUS           reduce using rule 41 (expr -> NUMBER .)
    TIMES           reduce using rule 41 (expr -> NUMBER .)
    DIV             reduce using rule 41 (expr -> NUMBER .)
    MOD             reduce using rule 41 (expr -> NUMBER .)
    AND             reduce using rule 41 (expr -> NUMBER .)
    OR              reduce using rule 41 (expr -> NUMBER .)
    LT              reduce using rule 41 (expr -> NUMBER .)
    LTE             reduce using rule 41 (expr -> NUMBER .)
    GT              reduce using rule 41 (expr -> NUMBER .)
    GTE             reduce using rule 41 (expr -> NUMBER .)
    EQU             reduce using rule 41 (expr -> NUMBER .)
    NEQU            reduce using rule 41 (expr -> NUMBER .)
    CONTINUE        reduce using rule 41 (expr -> NUMBER .)
    BREAK           reduce using rule 41 (expr -> NUMBER .)
    ID              reduce using rule 41 (expr -> NUMBER .)
    IF              reduce using rule 41 (expr -> NUMBER .)
    WHILE           reduce using rule 41 (expr -> NUMBER .)
    FOR             reduce using rule 41 (expr -> NUMBER .)
    NUMBER          reduce using rule 41 (expr -> NUMBER .)
    TRUE            reduce using rule 41 (expr -> NUMBER .)
    FALSE           reduce using rule 41 (expr -> NUMBER .)
    LPRAN           reduce using rule 41 (expr -> NUMBER .)
    $end            reduce using rule 41 (expr -> NUMBER .)
    COLON           reduce using rule 41 (expr -> NUMBER .)
    RPRAN           reduce using rule 41 (expr -> NUMBER .)
    RBRACE          reduce using rule 41 (expr -> NUMBER .)


state 19

    (42) expr -> TRUE .

    PLUS            reduce using rule 42 (expr -> TRUE .)
    MINUS           reduce using rule 42 (expr -> TRUE .)
    TIMES           reduce using rule 42 (expr -> TRUE .)
    DIV             reduce using rule 42 (expr -> TRUE .)
    MOD             reduce using rule 42 (expr -> TRUE .)
    AND             reduce using rule 42 (expr -> TRUE .)
    OR              reduce using rule 42 (expr -> TRUE .)
    LT              reduce using rule 42 (expr -> TRUE .)
    LTE             reduce using rule 42 (expr -> TRUE .)
    GT              reduce using rule 42 (expr -> TRUE .)
    GTE             reduce using rule 42 (expr -> TRUE .)
    EQU             reduce using rule 42 (expr -> TRUE .)
    NEQU            reduce using rule 42 (expr -> TRUE .)
    CONTINUE        reduce using rule 42 (expr -> TRUE .)
    BREAK           reduce using rule 42 (expr -> TRUE .)
    ID              reduce using rule 42 (expr -> TRUE .)
    IF              reduce using rule 42 (expr -> TRUE .)
    WHILE           reduce using rule 42 (expr -> TRUE .)
    FOR             reduce using rule 42 (expr -> TRUE .)
    NUMBER          reduce using rule 42 (expr -> TRUE .)
    TRUE            reduce using rule 42 (expr -> TRUE .)
    FALSE           reduce using rule 42 (expr -> TRUE .)
    LPRAN           reduce using rule 42 (expr -> TRUE .)
    $end            reduce using rule 42 (expr -> TRUE .)
    COLON           reduce using rule 42 (expr -> TRUE .)
    RPRAN           reduce using rule 42 (expr -> TRUE .)
    RBRACE          reduce using rule 42 (expr -> TRUE .)


state 20

    (43) expr -> FALSE .

    PLUS            reduce using rule 43 (expr -> FALSE .)
    MINUS           reduce using rule 43 (expr -> FALSE .)
    TIMES           reduce using rule 43 (expr -> FALSE .)
    DIV             reduce using rule 43 (expr -> FALSE .)
    MOD             reduce using rule 43 (expr -> FALSE .)
    AND             reduce using rule 43 (expr -> FALSE .)
    OR              reduce using rule 43 (expr -> FALSE .)
    LT              reduce using rule 43 (expr -> FALSE .)
    LTE             reduce using rule 43 (expr -> FALSE .)
    GT              reduce using rule 43 (expr -> FALSE .)
    GTE             reduce using rule 43 (expr -> FALSE .)
    EQU             reduce using rule 43 (expr -> FALSE .)
    NEQU            reduce using rule 43 (expr -> FALSE .)
    CONTINUE        reduce using rule 43 (expr -> FALSE .)
    BREAK           reduce using rule 43 (expr -> FALSE .)
    ID              reduce using rule 43 (expr -> FALSE .)
    IF              reduce using rule 43 (expr -> FALSE .)
    WHILE           reduce using rule 43 (expr -> FALSE .)
    FOR             reduce using rule 43 (expr -> FALSE .)
    NUMBER          reduce using rule 43 (expr -> FALSE .)
    TRUE            reduce using rule 43 (expr -> FALSE .)
    FALSE           reduce using rule 43 (expr -> FALSE .)
    LPRAN           reduce using rule 43 (expr -> FALSE .)
    $end            reduce using rule 43 (expr -> FALSE .)
    COLON           reduce using rule 43 (expr -> FALSE .)
    RPRAN           reduce using rule 43 (expr -> FALSE .)
    RBRACE          reduce using rule 43 (expr -> FALSE .)


state 21

    (27) expr -> expr PLUS . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 46

state 22

    (28) expr -> expr MINUS . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 47

state 23

    (29) expr -> expr TIMES . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 48

state 24

    (30) expr -> expr DIV . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 49

state 25

    (31) expr -> expr MOD . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 50

state 26

    (32) expr -> expr AND . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 51

state 27

    (33) expr -> expr OR . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 52

state 28

    (34) expr -> expr LT . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 53

state 29

    (35) expr -> expr LTE . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 54

state 30

    (36) expr -> expr GT . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 55

state 31

    (37) expr -> expr GTE . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 56

state 32

    (38) expr -> expr EQU . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 57

state 33

    (39) expr -> expr NEQU . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 58

state 34

    (20) assignment -> ID EQ . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 59

state 35

    (21) assignment -> ID PLUS_EQUAL . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 60

state 36

    (22) assignment -> ID MINUS_EQUAL . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 61

state 37

    (23) assignment -> ID TIMES_EQUAL . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 62

state 38

    (24) assignment -> ID DIV_EQUAL . expr
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 63

state 39

    (15) if -> IF expr . COLON LBRACE statements RBRACE elif
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    COLON           shift and go to state 64
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33


state 40

    (40) expr -> ID .

    COLON           reduce using rule 40 (expr -> ID .)
    PLUS            reduce using rule 40 (expr -> ID .)
    MINUS           reduce using rule 40 (expr -> ID .)
    TIMES           reduce using rule 40 (expr -> ID .)
    DIV             reduce using rule 40 (expr -> ID .)
    MOD             reduce using rule 40 (expr -> ID .)
    AND             reduce using rule 40 (expr -> ID .)
    OR              reduce using rule 40 (expr -> ID .)
    LT              reduce using rule 40 (expr -> ID .)
    LTE             reduce using rule 40 (expr -> ID .)
    GT              reduce using rule 40 (expr -> ID .)
    GTE             reduce using rule 40 (expr -> ID .)
    EQU             reduce using rule 40 (expr -> ID .)
    NEQU            reduce using rule 40 (expr -> ID .)
    RPRAN           reduce using rule 40 (expr -> ID .)
    CONTINUE        reduce using rule 40 (expr -> ID .)
    BREAK           reduce using rule 40 (expr -> ID .)
    ID              reduce using rule 40 (expr -> ID .)
    IF              reduce using rule 40 (expr -> ID .)
    WHILE           reduce using rule 40 (expr -> ID .)
    FOR             reduce using rule 40 (expr -> ID .)
    NUMBER          reduce using rule 40 (expr -> ID .)
    TRUE            reduce using rule 40 (expr -> ID .)
    FALSE           reduce using rule 40 (expr -> ID .)
    LPRAN           reduce using rule 40 (expr -> ID .)
    $end            reduce using rule 40 (expr -> ID .)
    RBRACE          reduce using rule 40 (expr -> ID .)


state 41

    (14) while -> WHILE expr . COLON LBRACE statements RBRACE
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    COLON           shift and go to state 65
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33


state 42

    (10) for -> FOR ID . IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    IN              shift and go to state 66


state 43

    (44) expr -> LPRAN expr . RPRAN
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    RPRAN           shift and go to state 67
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33


state 44

    (25) expr -> MINUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 25 (expr -> MINUS expr .)
    MINUS           reduce using rule 25 (expr -> MINUS expr .)
    TIMES           reduce using rule 25 (expr -> MINUS expr .)
    DIV             reduce using rule 25 (expr -> MINUS expr .)
    MOD             reduce using rule 25 (expr -> MINUS expr .)
    AND             reduce using rule 25 (expr -> MINUS expr .)
    OR              reduce using rule 25 (expr -> MINUS expr .)
    LT              reduce using rule 25 (expr -> MINUS expr .)
    LTE             reduce using rule 25 (expr -> MINUS expr .)
    GT              reduce using rule 25 (expr -> MINUS expr .)
    GTE             reduce using rule 25 (expr -> MINUS expr .)
    EQU             reduce using rule 25 (expr -> MINUS expr .)
    NEQU            reduce using rule 25 (expr -> MINUS expr .)
    CONTINUE        reduce using rule 25 (expr -> MINUS expr .)
    BREAK           reduce using rule 25 (expr -> MINUS expr .)
    ID              reduce using rule 25 (expr -> MINUS expr .)
    IF              reduce using rule 25 (expr -> MINUS expr .)
    WHILE           reduce using rule 25 (expr -> MINUS expr .)
    FOR             reduce using rule 25 (expr -> MINUS expr .)
    NUMBER          reduce using rule 25 (expr -> MINUS expr .)
    TRUE            reduce using rule 25 (expr -> MINUS expr .)
    FALSE           reduce using rule 25 (expr -> MINUS expr .)
    LPRAN           reduce using rule 25 (expr -> MINUS expr .)
    $end            reduce using rule 25 (expr -> MINUS expr .)
    COLON           reduce using rule 25 (expr -> MINUS expr .)
    RPRAN           reduce using rule 25 (expr -> MINUS expr .)
    RBRACE          reduce using rule 25 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 45

    (26) expr -> PLUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 26 (expr -> PLUS expr .)
    MINUS           reduce using rule 26 (expr -> PLUS expr .)
    TIMES           reduce using rule 26 (expr -> PLUS expr .)
    DIV             reduce using rule 26 (expr -> PLUS expr .)
    MOD             reduce using rule 26 (expr -> PLUS expr .)
    AND             reduce using rule 26 (expr -> PLUS expr .)
    OR              reduce using rule 26 (expr -> PLUS expr .)
    LT              reduce using rule 26 (expr -> PLUS expr .)
    LTE             reduce using rule 26 (expr -> PLUS expr .)
    GT              reduce using rule 26 (expr -> PLUS expr .)
    GTE             reduce using rule 26 (expr -> PLUS expr .)
    EQU             reduce using rule 26 (expr -> PLUS expr .)
    NEQU            reduce using rule 26 (expr -> PLUS expr .)
    CONTINUE        reduce using rule 26 (expr -> PLUS expr .)
    BREAK           reduce using rule 26 (expr -> PLUS expr .)
    ID              reduce using rule 26 (expr -> PLUS expr .)
    IF              reduce using rule 26 (expr -> PLUS expr .)
    WHILE           reduce using rule 26 (expr -> PLUS expr .)
    FOR             reduce using rule 26 (expr -> PLUS expr .)
    NUMBER          reduce using rule 26 (expr -> PLUS expr .)
    TRUE            reduce using rule 26 (expr -> PLUS expr .)
    FALSE           reduce using rule 26 (expr -> PLUS expr .)
    LPRAN           reduce using rule 26 (expr -> PLUS expr .)
    $end            reduce using rule 26 (expr -> PLUS expr .)
    COLON           reduce using rule 26 (expr -> PLUS expr .)
    RPRAN           reduce using rule 26 (expr -> PLUS expr .)
    RBRACE          reduce using rule 26 (expr -> PLUS expr .)

  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 46

    (27) expr -> expr PLUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 27 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 27 (expr -> expr PLUS expr .)
    AND             reduce using rule 27 (expr -> expr PLUS expr .)
    OR              reduce using rule 27 (expr -> expr PLUS expr .)
    LT              reduce using rule 27 (expr -> expr PLUS expr .)
    LTE             reduce using rule 27 (expr -> expr PLUS expr .)
    GT              reduce using rule 27 (expr -> expr PLUS expr .)
    GTE             reduce using rule 27 (expr -> expr PLUS expr .)
    EQU             reduce using rule 27 (expr -> expr PLUS expr .)
    NEQU            reduce using rule 27 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 27 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 27 (expr -> expr PLUS expr .)
    ID              reduce using rule 27 (expr -> expr PLUS expr .)
    IF              reduce using rule 27 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 27 (expr -> expr PLUS expr .)
    FOR             reduce using rule 27 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 27 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 27 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 27 (expr -> expr PLUS expr .)
    LPRAN           reduce using rule 27 (expr -> expr PLUS expr .)
    $end            reduce using rule 27 (expr -> expr PLUS expr .)
    COLON           reduce using rule 27 (expr -> expr PLUS expr .)
    RPRAN           reduce using rule 27 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 27 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! TIMES           [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 47

    (28) expr -> expr MINUS expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 28 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 28 (expr -> expr MINUS expr .)
    AND             reduce using rule 28 (expr -> expr MINUS expr .)
    OR              reduce using rule 28 (expr -> expr MINUS expr .)
    LT              reduce using rule 28 (expr -> expr MINUS expr .)
    LTE             reduce using rule 28 (expr -> expr MINUS expr .)
    GT              reduce using rule 28 (expr -> expr MINUS expr .)
    GTE             reduce using rule 28 (expr -> expr MINUS expr .)
    EQU             reduce using rule 28 (expr -> expr MINUS expr .)
    NEQU            reduce using rule 28 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 28 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 28 (expr -> expr MINUS expr .)
    ID              reduce using rule 28 (expr -> expr MINUS expr .)
    IF              reduce using rule 28 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 28 (expr -> expr MINUS expr .)
    FOR             reduce using rule 28 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 28 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 28 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 28 (expr -> expr MINUS expr .)
    LPRAN           reduce using rule 28 (expr -> expr MINUS expr .)
    $end            reduce using rule 28 (expr -> expr MINUS expr .)
    COLON           reduce using rule 28 (expr -> expr MINUS expr .)
    RPRAN           reduce using rule 28 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 28 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! TIMES           [ reduce using rule 28 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 28 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 48

    (29) expr -> expr TIMES expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 29 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 29 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 29 (expr -> expr TIMES expr .)
    DIV             reduce using rule 29 (expr -> expr TIMES expr .)
    MOD             reduce using rule 29 (expr -> expr TIMES expr .)
    AND             reduce using rule 29 (expr -> expr TIMES expr .)
    OR              reduce using rule 29 (expr -> expr TIMES expr .)
    LT              reduce using rule 29 (expr -> expr TIMES expr .)
    LTE             reduce using rule 29 (expr -> expr TIMES expr .)
    GT              reduce using rule 29 (expr -> expr TIMES expr .)
    GTE             reduce using rule 29 (expr -> expr TIMES expr .)
    EQU             reduce using rule 29 (expr -> expr TIMES expr .)
    NEQU            reduce using rule 29 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 29 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 29 (expr -> expr TIMES expr .)
    ID              reduce using rule 29 (expr -> expr TIMES expr .)
    IF              reduce using rule 29 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 29 (expr -> expr TIMES expr .)
    FOR             reduce using rule 29 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 29 (expr -> expr TIMES expr .)
    TRUE            reduce using rule 29 (expr -> expr TIMES expr .)
    FALSE           reduce using rule 29 (expr -> expr TIMES expr .)
    LPRAN           reduce using rule 29 (expr -> expr TIMES expr .)
    $end            reduce using rule 29 (expr -> expr TIMES expr .)
    COLON           reduce using rule 29 (expr -> expr TIMES expr .)
    RPRAN           reduce using rule 29 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 29 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 49

    (30) expr -> expr DIV expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 30 (expr -> expr DIV expr .)
    MINUS           reduce using rule 30 (expr -> expr DIV expr .)
    TIMES           reduce using rule 30 (expr -> expr DIV expr .)
    DIV             reduce using rule 30 (expr -> expr DIV expr .)
    MOD             reduce using rule 30 (expr -> expr DIV expr .)
    AND             reduce using rule 30 (expr -> expr DIV expr .)
    OR              reduce using rule 30 (expr -> expr DIV expr .)
    LT              reduce using rule 30 (expr -> expr DIV expr .)
    LTE             reduce using rule 30 (expr -> expr DIV expr .)
    GT              reduce using rule 30 (expr -> expr DIV expr .)
    GTE             reduce using rule 30 (expr -> expr DIV expr .)
    EQU             reduce using rule 30 (expr -> expr DIV expr .)
    NEQU            reduce using rule 30 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 30 (expr -> expr DIV expr .)
    BREAK           reduce using rule 30 (expr -> expr DIV expr .)
    ID              reduce using rule 30 (expr -> expr DIV expr .)
    IF              reduce using rule 30 (expr -> expr DIV expr .)
    WHILE           reduce using rule 30 (expr -> expr DIV expr .)
    FOR             reduce using rule 30 (expr -> expr DIV expr .)
    NUMBER          reduce using rule 30 (expr -> expr DIV expr .)
    TRUE            reduce using rule 30 (expr -> expr DIV expr .)
    FALSE           reduce using rule 30 (expr -> expr DIV expr .)
    LPRAN           reduce using rule 30 (expr -> expr DIV expr .)
    $end            reduce using rule 30 (expr -> expr DIV expr .)
    COLON           reduce using rule 30 (expr -> expr DIV expr .)
    RPRAN           reduce using rule 30 (expr -> expr DIV expr .)
    RBRACE          reduce using rule 30 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 50

    (31) expr -> expr MOD expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    PLUS            reduce using rule 31 (expr -> expr MOD expr .)
    MINUS           reduce using rule 31 (expr -> expr MOD expr .)
    TIMES           reduce using rule 31 (expr -> expr MOD expr .)
    DIV             reduce using rule 31 (expr -> expr MOD expr .)
    MOD             reduce using rule 31 (expr -> expr MOD expr .)
    AND             reduce using rule 31 (expr -> expr MOD expr .)
    OR              reduce using rule 31 (expr -> expr MOD expr .)
    LT              reduce using rule 31 (expr -> expr MOD expr .)
    LTE             reduce using rule 31 (expr -> expr MOD expr .)
    GT              reduce using rule 31 (expr -> expr MOD expr .)
    GTE             reduce using rule 31 (expr -> expr MOD expr .)
    EQU             reduce using rule 31 (expr -> expr MOD expr .)
    NEQU            reduce using rule 31 (expr -> expr MOD expr .)
    CONTINUE        reduce using rule 31 (expr -> expr MOD expr .)
    BREAK           reduce using rule 31 (expr -> expr MOD expr .)
    ID              reduce using rule 31 (expr -> expr MOD expr .)
    IF              reduce using rule 31 (expr -> expr MOD expr .)
    WHILE           reduce using rule 31 (expr -> expr MOD expr .)
    FOR             reduce using rule 31 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 31 (expr -> expr MOD expr .)
    TRUE            reduce using rule 31 (expr -> expr MOD expr .)
    FALSE           reduce using rule 31 (expr -> expr MOD expr .)
    LPRAN           reduce using rule 31 (expr -> expr MOD expr .)
    $end            reduce using rule 31 (expr -> expr MOD expr .)
    COLON           reduce using rule 31 (expr -> expr MOD expr .)
    RPRAN           reduce using rule 31 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 31 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIV             [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 51

    (32) expr -> expr AND expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 32 (expr -> expr AND expr .)
    OR              reduce using rule 32 (expr -> expr AND expr .)
    LT              reduce using rule 32 (expr -> expr AND expr .)
    LTE             reduce using rule 32 (expr -> expr AND expr .)
    GT              reduce using rule 32 (expr -> expr AND expr .)
    GTE             reduce using rule 32 (expr -> expr AND expr .)
    EQU             reduce using rule 32 (expr -> expr AND expr .)
    NEQU            reduce using rule 32 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 32 (expr -> expr AND expr .)
    BREAK           reduce using rule 32 (expr -> expr AND expr .)
    ID              reduce using rule 32 (expr -> expr AND expr .)
    IF              reduce using rule 32 (expr -> expr AND expr .)
    WHILE           reduce using rule 32 (expr -> expr AND expr .)
    FOR             reduce using rule 32 (expr -> expr AND expr .)
    NUMBER          reduce using rule 32 (expr -> expr AND expr .)
    TRUE            reduce using rule 32 (expr -> expr AND expr .)
    FALSE           reduce using rule 32 (expr -> expr AND expr .)
    LPRAN           reduce using rule 32 (expr -> expr AND expr .)
    $end            reduce using rule 32 (expr -> expr AND expr .)
    COLON           reduce using rule 32 (expr -> expr AND expr .)
    RPRAN           reduce using rule 32 (expr -> expr AND expr .)
    RBRACE          reduce using rule 32 (expr -> expr AND expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 32 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 32 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 52

    (33) expr -> expr OR expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 33 (expr -> expr OR expr .)
    OR              reduce using rule 33 (expr -> expr OR expr .)
    LT              reduce using rule 33 (expr -> expr OR expr .)
    LTE             reduce using rule 33 (expr -> expr OR expr .)
    GT              reduce using rule 33 (expr -> expr OR expr .)
    GTE             reduce using rule 33 (expr -> expr OR expr .)
    EQU             reduce using rule 33 (expr -> expr OR expr .)
    NEQU            reduce using rule 33 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 33 (expr -> expr OR expr .)
    BREAK           reduce using rule 33 (expr -> expr OR expr .)
    ID              reduce using rule 33 (expr -> expr OR expr .)
    IF              reduce using rule 33 (expr -> expr OR expr .)
    WHILE           reduce using rule 33 (expr -> expr OR expr .)
    FOR             reduce using rule 33 (expr -> expr OR expr .)
    NUMBER          reduce using rule 33 (expr -> expr OR expr .)
    TRUE            reduce using rule 33 (expr -> expr OR expr .)
    FALSE           reduce using rule 33 (expr -> expr OR expr .)
    LPRAN           reduce using rule 33 (expr -> expr OR expr .)
    $end            reduce using rule 33 (expr -> expr OR expr .)
    COLON           reduce using rule 33 (expr -> expr OR expr .)
    RPRAN           reduce using rule 33 (expr -> expr OR expr .)
    RBRACE          reduce using rule 33 (expr -> expr OR expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 53

    (34) expr -> expr LT expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 34 (expr -> expr LT expr .)
    OR              reduce using rule 34 (expr -> expr LT expr .)
    LT              reduce using rule 34 (expr -> expr LT expr .)
    LTE             reduce using rule 34 (expr -> expr LT expr .)
    GT              reduce using rule 34 (expr -> expr LT expr .)
    GTE             reduce using rule 34 (expr -> expr LT expr .)
    EQU             reduce using rule 34 (expr -> expr LT expr .)
    NEQU            reduce using rule 34 (expr -> expr LT expr .)
    CONTINUE        reduce using rule 34 (expr -> expr LT expr .)
    BREAK           reduce using rule 34 (expr -> expr LT expr .)
    ID              reduce using rule 34 (expr -> expr LT expr .)
    IF              reduce using rule 34 (expr -> expr LT expr .)
    WHILE           reduce using rule 34 (expr -> expr LT expr .)
    FOR             reduce using rule 34 (expr -> expr LT expr .)
    NUMBER          reduce using rule 34 (expr -> expr LT expr .)
    TRUE            reduce using rule 34 (expr -> expr LT expr .)
    FALSE           reduce using rule 34 (expr -> expr LT expr .)
    LPRAN           reduce using rule 34 (expr -> expr LT expr .)
    $end            reduce using rule 34 (expr -> expr LT expr .)
    COLON           reduce using rule 34 (expr -> expr LT expr .)
    RPRAN           reduce using rule 34 (expr -> expr LT expr .)
    RBRACE          reduce using rule 34 (expr -> expr LT expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 54

    (35) expr -> expr LTE expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 35 (expr -> expr LTE expr .)
    OR              reduce using rule 35 (expr -> expr LTE expr .)
    LT              reduce using rule 35 (expr -> expr LTE expr .)
    LTE             reduce using rule 35 (expr -> expr LTE expr .)
    GT              reduce using rule 35 (expr -> expr LTE expr .)
    GTE             reduce using rule 35 (expr -> expr LTE expr .)
    EQU             reduce using rule 35 (expr -> expr LTE expr .)
    NEQU            reduce using rule 35 (expr -> expr LTE expr .)
    CONTINUE        reduce using rule 35 (expr -> expr LTE expr .)
    BREAK           reduce using rule 35 (expr -> expr LTE expr .)
    ID              reduce using rule 35 (expr -> expr LTE expr .)
    IF              reduce using rule 35 (expr -> expr LTE expr .)
    WHILE           reduce using rule 35 (expr -> expr LTE expr .)
    FOR             reduce using rule 35 (expr -> expr LTE expr .)
    NUMBER          reduce using rule 35 (expr -> expr LTE expr .)
    TRUE            reduce using rule 35 (expr -> expr LTE expr .)
    FALSE           reduce using rule 35 (expr -> expr LTE expr .)
    LPRAN           reduce using rule 35 (expr -> expr LTE expr .)
    $end            reduce using rule 35 (expr -> expr LTE expr .)
    COLON           reduce using rule 35 (expr -> expr LTE expr .)
    RPRAN           reduce using rule 35 (expr -> expr LTE expr .)
    RBRACE          reduce using rule 35 (expr -> expr LTE expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! DIV             [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 55

    (36) expr -> expr GT expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 36 (expr -> expr GT expr .)
    OR              reduce using rule 36 (expr -> expr GT expr .)
    LT              reduce using rule 36 (expr -> expr GT expr .)
    LTE             reduce using rule 36 (expr -> expr GT expr .)
    GT              reduce using rule 36 (expr -> expr GT expr .)
    GTE             reduce using rule 36 (expr -> expr GT expr .)
    EQU             reduce using rule 36 (expr -> expr GT expr .)
    NEQU            reduce using rule 36 (expr -> expr GT expr .)
    CONTINUE        reduce using rule 36 (expr -> expr GT expr .)
    BREAK           reduce using rule 36 (expr -> expr GT expr .)
    ID              reduce using rule 36 (expr -> expr GT expr .)
    IF              reduce using rule 36 (expr -> expr GT expr .)
    WHILE           reduce using rule 36 (expr -> expr GT expr .)
    FOR             reduce using rule 36 (expr -> expr GT expr .)
    NUMBER          reduce using rule 36 (expr -> expr GT expr .)
    TRUE            reduce using rule 36 (expr -> expr GT expr .)
    FALSE           reduce using rule 36 (expr -> expr GT expr .)
    LPRAN           reduce using rule 36 (expr -> expr GT expr .)
    $end            reduce using rule 36 (expr -> expr GT expr .)
    COLON           reduce using rule 36 (expr -> expr GT expr .)
    RPRAN           reduce using rule 36 (expr -> expr GT expr .)
    RBRACE          reduce using rule 36 (expr -> expr GT expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 36 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 36 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr GT expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 56

    (37) expr -> expr GTE expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 37 (expr -> expr GTE expr .)
    OR              reduce using rule 37 (expr -> expr GTE expr .)
    LT              reduce using rule 37 (expr -> expr GTE expr .)
    LTE             reduce using rule 37 (expr -> expr GTE expr .)
    GT              reduce using rule 37 (expr -> expr GTE expr .)
    GTE             reduce using rule 37 (expr -> expr GTE expr .)
    EQU             reduce using rule 37 (expr -> expr GTE expr .)
    NEQU            reduce using rule 37 (expr -> expr GTE expr .)
    CONTINUE        reduce using rule 37 (expr -> expr GTE expr .)
    BREAK           reduce using rule 37 (expr -> expr GTE expr .)
    ID              reduce using rule 37 (expr -> expr GTE expr .)
    IF              reduce using rule 37 (expr -> expr GTE expr .)
    WHILE           reduce using rule 37 (expr -> expr GTE expr .)
    FOR             reduce using rule 37 (expr -> expr GTE expr .)
    NUMBER          reduce using rule 37 (expr -> expr GTE expr .)
    TRUE            reduce using rule 37 (expr -> expr GTE expr .)
    FALSE           reduce using rule 37 (expr -> expr GTE expr .)
    LPRAN           reduce using rule 37 (expr -> expr GTE expr .)
    $end            reduce using rule 37 (expr -> expr GTE expr .)
    COLON           reduce using rule 37 (expr -> expr GTE expr .)
    RPRAN           reduce using rule 37 (expr -> expr GTE expr .)
    RBRACE          reduce using rule 37 (expr -> expr GTE expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 37 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr GTE expr .) ]
  ! DIV             [ reduce using rule 37 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr GTE expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 57

    (38) expr -> expr EQU expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 38 (expr -> expr EQU expr .)
    OR              reduce using rule 38 (expr -> expr EQU expr .)
    LT              reduce using rule 38 (expr -> expr EQU expr .)
    LTE             reduce using rule 38 (expr -> expr EQU expr .)
    GT              reduce using rule 38 (expr -> expr EQU expr .)
    GTE             reduce using rule 38 (expr -> expr EQU expr .)
    EQU             reduce using rule 38 (expr -> expr EQU expr .)
    NEQU            reduce using rule 38 (expr -> expr EQU expr .)
    CONTINUE        reduce using rule 38 (expr -> expr EQU expr .)
    BREAK           reduce using rule 38 (expr -> expr EQU expr .)
    ID              reduce using rule 38 (expr -> expr EQU expr .)
    IF              reduce using rule 38 (expr -> expr EQU expr .)
    WHILE           reduce using rule 38 (expr -> expr EQU expr .)
    FOR             reduce using rule 38 (expr -> expr EQU expr .)
    NUMBER          reduce using rule 38 (expr -> expr EQU expr .)
    TRUE            reduce using rule 38 (expr -> expr EQU expr .)
    FALSE           reduce using rule 38 (expr -> expr EQU expr .)
    LPRAN           reduce using rule 38 (expr -> expr EQU expr .)
    $end            reduce using rule 38 (expr -> expr EQU expr .)
    COLON           reduce using rule 38 (expr -> expr EQU expr .)
    RPRAN           reduce using rule 38 (expr -> expr EQU expr .)
    RBRACE          reduce using rule 38 (expr -> expr EQU expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 38 (expr -> expr EQU expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr EQU expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr EQU expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> expr EQU expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr EQU expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 58

    (39) expr -> expr NEQU expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    AND             reduce using rule 39 (expr -> expr NEQU expr .)
    OR              reduce using rule 39 (expr -> expr NEQU expr .)
    LT              reduce using rule 39 (expr -> expr NEQU expr .)
    LTE             reduce using rule 39 (expr -> expr NEQU expr .)
    GT              reduce using rule 39 (expr -> expr NEQU expr .)
    GTE             reduce using rule 39 (expr -> expr NEQU expr .)
    EQU             reduce using rule 39 (expr -> expr NEQU expr .)
    NEQU            reduce using rule 39 (expr -> expr NEQU expr .)
    CONTINUE        reduce using rule 39 (expr -> expr NEQU expr .)
    BREAK           reduce using rule 39 (expr -> expr NEQU expr .)
    ID              reduce using rule 39 (expr -> expr NEQU expr .)
    IF              reduce using rule 39 (expr -> expr NEQU expr .)
    WHILE           reduce using rule 39 (expr -> expr NEQU expr .)
    FOR             reduce using rule 39 (expr -> expr NEQU expr .)
    NUMBER          reduce using rule 39 (expr -> expr NEQU expr .)
    TRUE            reduce using rule 39 (expr -> expr NEQU expr .)
    FALSE           reduce using rule 39 (expr -> expr NEQU expr .)
    LPRAN           reduce using rule 39 (expr -> expr NEQU expr .)
    $end            reduce using rule 39 (expr -> expr NEQU expr .)
    COLON           reduce using rule 39 (expr -> expr NEQU expr .)
    RPRAN           reduce using rule 39 (expr -> expr NEQU expr .)
    RBRACE          reduce using rule 39 (expr -> expr NEQU expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25

  ! PLUS            [ reduce using rule 39 (expr -> expr NEQU expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr NEQU expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr NEQU expr .) ]
  ! DIV             [ reduce using rule 39 (expr -> expr NEQU expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr NEQU expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 27 ]
  ! LT              [ shift and go to state 28 ]
  ! LTE             [ shift and go to state 29 ]
  ! GT              [ shift and go to state 30 ]
  ! GTE             [ shift and go to state 31 ]
  ! EQU             [ shift and go to state 32 ]
  ! NEQU            [ shift and go to state 33 ]


state 59

    (20) assignment -> ID EQ expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 20 (assignment -> ID EQ expr .)
    BREAK           reduce using rule 20 (assignment -> ID EQ expr .)
    ID              reduce using rule 20 (assignment -> ID EQ expr .)
    IF              reduce using rule 20 (assignment -> ID EQ expr .)
    WHILE           reduce using rule 20 (assignment -> ID EQ expr .)
    FOR             reduce using rule 20 (assignment -> ID EQ expr .)
    NUMBER          reduce using rule 20 (assignment -> ID EQ expr .)
    TRUE            reduce using rule 20 (assignment -> ID EQ expr .)
    FALSE           reduce using rule 20 (assignment -> ID EQ expr .)
    LPRAN           reduce using rule 20 (assignment -> ID EQ expr .)
    $end            reduce using rule 20 (assignment -> ID EQ expr .)
    RBRACE          reduce using rule 20 (assignment -> ID EQ expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 20 (assignment -> ID EQ expr .) ]
  ! PLUS            [ reduce using rule 20 (assignment -> ID EQ expr .) ]


state 60

    (21) assignment -> ID PLUS_EQUAL expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    BREAK           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    ID              reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    IF              reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    WHILE           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    FOR             reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    NUMBER          reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    TRUE            reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    FALSE           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    LPRAN           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    $end            reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    RBRACE          reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .) ]


state 61

    (22) assignment -> ID MINUS_EQUAL expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    BREAK           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    ID              reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    IF              reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    WHILE           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    FOR             reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    NUMBER          reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    TRUE            reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    FALSE           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    LPRAN           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    $end            reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    RBRACE          reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .) ]


state 62

    (23) assignment -> ID TIMES_EQUAL expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    BREAK           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    ID              reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    IF              reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    WHILE           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    FOR             reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    NUMBER          reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    TRUE            reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    FALSE           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    LPRAN           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    $end            reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    RBRACE          reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .) ]


state 63

    (24) assignment -> ID DIV_EQUAL expr .
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    BREAK           reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    ID              reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    IF              reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    WHILE           reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    FOR             reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    NUMBER          reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    TRUE            reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    FALSE           reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    LPRAN           reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    $end            reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    RBRACE          reduce using rule 24 (assignment -> ID DIV_EQUAL expr .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33

  ! MINUS           [ reduce using rule 24 (assignment -> ID DIV_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 24 (assignment -> ID DIV_EQUAL expr .) ]


state 64

    (15) if -> IF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 68


state 65

    (14) while -> WHILE expr COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 69


state 66

    (10) for -> FOR ID IN . RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    RANGE           shift and go to state 70


state 67

    (44) expr -> LPRAN expr RPRAN .

    PLUS            reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    MINUS           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    TIMES           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    DIV             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    MOD             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    AND             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    OR              reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    LT              reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    LTE             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    GT              reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    GTE             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    EQU             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    NEQU            reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    CONTINUE        reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    BREAK           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    ID              reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    IF              reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    WHILE           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    FOR             reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    NUMBER          reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    TRUE            reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    FALSE           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    LPRAN           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    $end            reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    COLON           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    RPRAN           reduce using rule 44 (expr -> LPRAN expr RPRAN .)
    RBRACE          reduce using rule 44 (expr -> LPRAN expr RPRAN .)


state 68

    (15) if -> IF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    RBRACE          reduce using rule 47 (empty -> .)
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)

    statements                     shift and go to state 71
    empty                          shift and go to state 2

state 69

    (14) while -> WHILE expr COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    RBRACE          reduce using rule 47 (empty -> .)
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)

    statements                     shift and go to state 72
    empty                          shift and go to state 2

state 70

    (10) for -> FOR ID IN RANGE . LPRAN params RPRAN COLON LBRACE statements RBRACE

    LPRAN           shift and go to state 73


state 71

    (15) if -> IF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 74
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7

state 72

    (14) while -> WHILE expr COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 75
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7

state 73

    (10) for -> FOR ID IN RANGE LPRAN . params RPRAN COLON LBRACE statements RBRACE
    (11) params -> . num_or_id
    (12) params -> . num_or_id SEP num_or_id
    (13) params -> . num_or_id SEP num_or_id SEP num_or_id
    (45) num_or_id -> . NUMBER
    (46) num_or_id -> . ID

    NUMBER          shift and go to state 79
    ID              shift and go to state 76

    params                         shift and go to state 77
    num_or_id                      shift and go to state 78

state 74

    (15) if -> IF expr COLON LBRACE statements RBRACE . elif
    (16) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (17) elif -> . else
    (18) else -> . ELSE COLON LBRACE statements RBRACE
    (19) else -> . empty
    (47) empty -> .

    ELIF            shift and go to state 81
    ELSE            shift and go to state 83
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)
    $end            reduce using rule 47 (empty -> .)
    RBRACE          reduce using rule 47 (empty -> .)

    elif                           shift and go to state 80
    else                           shift and go to state 82
    empty                          shift and go to state 84

state 75

    (14) while -> WHILE expr COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    ID              reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    IF              reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    $end            reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)


state 76

    (46) num_or_id -> ID .

    SEP             reduce using rule 46 (num_or_id -> ID .)
    RPRAN           reduce using rule 46 (num_or_id -> ID .)


state 77

    (10) for -> FOR ID IN RANGE LPRAN params . RPRAN COLON LBRACE statements RBRACE

    RPRAN           shift and go to state 85


state 78

    (11) params -> num_or_id .
    (12) params -> num_or_id . SEP num_or_id
    (13) params -> num_or_id . SEP num_or_id SEP num_or_id

    RPRAN           reduce using rule 11 (params -> num_or_id .)
    SEP             shift and go to state 86


state 79

    (45) num_or_id -> NUMBER .

    SEP             reduce using rule 45 (num_or_id -> NUMBER .)
    RPRAN           reduce using rule 45 (num_or_id -> NUMBER .)


state 80

    (15) if -> IF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    MINUS           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    PLUS            reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)


state 81

    (16) elif -> ELIF . expr COLON LBRACE statements RBRACE elif
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    ID              shift and go to state 40
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 87

state 82

    (17) elif -> else .

    CONTINUE        reduce using rule 17 (elif -> else .)
    BREAK           reduce using rule 17 (elif -> else .)
    ID              reduce using rule 17 (elif -> else .)
    IF              reduce using rule 17 (elif -> else .)
    WHILE           reduce using rule 17 (elif -> else .)
    FOR             reduce using rule 17 (elif -> else .)
    MINUS           reduce using rule 17 (elif -> else .)
    PLUS            reduce using rule 17 (elif -> else .)
    NUMBER          reduce using rule 17 (elif -> else .)
    TRUE            reduce using rule 17 (elif -> else .)
    FALSE           reduce using rule 17 (elif -> else .)
    LPRAN           reduce using rule 17 (elif -> else .)
    $end            reduce using rule 17 (elif -> else .)
    RBRACE          reduce using rule 17 (elif -> else .)


state 83

    (18) else -> ELSE . COLON LBRACE statements RBRACE

    COLON           shift and go to state 88


state 84

    (19) else -> empty .

    CONTINUE        reduce using rule 19 (else -> empty .)
    BREAK           reduce using rule 19 (else -> empty .)
    ID              reduce using rule 19 (else -> empty .)
    IF              reduce using rule 19 (else -> empty .)
    WHILE           reduce using rule 19 (else -> empty .)
    FOR             reduce using rule 19 (else -> empty .)
    MINUS           reduce using rule 19 (else -> empty .)
    PLUS            reduce using rule 19 (else -> empty .)
    NUMBER          reduce using rule 19 (else -> empty .)
    TRUE            reduce using rule 19 (else -> empty .)
    FALSE           reduce using rule 19 (else -> empty .)
    LPRAN           reduce using rule 19 (else -> empty .)
    $end            reduce using rule 19 (else -> empty .)
    RBRACE          reduce using rule 19 (else -> empty .)


state 85

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN . COLON LBRACE statements RBRACE

    COLON           shift and go to state 89


state 86

    (12) params -> num_or_id SEP . num_or_id
    (13) params -> num_or_id SEP . num_or_id SEP num_or_id
    (45) num_or_id -> . NUMBER
    (46) num_or_id -> . ID

    NUMBER          shift and go to state 79
    ID              shift and go to state 76

    num_or_id                      shift and go to state 90

state 87

    (16) elif -> ELIF expr . COLON LBRACE statements RBRACE elif
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MINUS expr
    (29) expr -> expr . TIMES expr
    (30) expr -> expr . DIV expr
    (31) expr -> expr . MOD expr
    (32) expr -> expr . AND expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . GTE expr
    (38) expr -> expr . EQU expr
    (39) expr -> expr . NEQU expr

    COLON           shift and go to state 91
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    MOD             shift and go to state 25
    AND             shift and go to state 26
    OR              shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33


state 88

    (18) else -> ELSE COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 92


state 89

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 93


state 90

    (12) params -> num_or_id SEP num_or_id .
    (13) params -> num_or_id SEP num_or_id . SEP num_or_id

    RPRAN           reduce using rule 12 (params -> num_or_id SEP num_or_id .)
    SEP             shift and go to state 94


state 91

    (16) elif -> ELIF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 95


state 92

    (18) else -> ELSE COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    RBRACE          reduce using rule 47 (empty -> .)
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)

    statements                     shift and go to state 96
    empty                          shift and go to state 2

state 93

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    RBRACE          reduce using rule 47 (empty -> .)
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)

    statements                     shift and go to state 97
    empty                          shift and go to state 2

state 94

    (13) params -> num_or_id SEP num_or_id SEP . num_or_id
    (45) num_or_id -> . NUMBER
    (46) num_or_id -> . ID

    NUMBER          shift and go to state 79
    ID              shift and go to state 76

    num_or_id                      shift and go to state 98

state 95

    (16) elif -> ELIF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (47) empty -> .

    RBRACE          reduce using rule 47 (empty -> .)
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)

    statements                     shift and go to state 99
    empty                          shift and go to state 2

state 96

    (18) else -> ELSE COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 100
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8

state 97

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 101
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8

state 98

    (13) params -> num_or_id SEP num_or_id SEP num_or_id .

    RPRAN           reduce using rule 13 (params -> num_or_id SEP num_or_id SEP num_or_id .)


state 99

    (16) elif -> ELIF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (24) assignment -> . ID DIV_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (25) expr -> . MINUS expr
    (26) expr -> . PLUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MINUS expr
    (29) expr -> . expr TIMES expr
    (30) expr -> . expr DIV expr
    (31) expr -> . expr MOD expr
    (32) expr -> . expr AND expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr GTE expr
    (38) expr -> . expr EQU expr
    (39) expr -> . expr NEQU expr
    (40) expr -> . ID
    (41) expr -> . NUMBER
    (42) expr -> . TRUE
    (43) expr -> . FALSE
    (44) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 102
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17
    NUMBER          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    LPRAN           shift and go to state 15

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7

state 100

    (18) else -> ELSE COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    ID              reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    IF              reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    $end            reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)


state 101

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    ID              reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    IF              reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    $end            reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)


state 102

    (16) elif -> ELIF expr COLON LBRACE statements RBRACE . elif
    (16) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (17) elif -> . else
    (18) else -> . ELSE COLON LBRACE statements RBRACE
    (19) else -> . empty
    (47) empty -> .

    ELIF            shift and go to state 81
    ELSE            shift and go to state 83
    CONTINUE        reduce using rule 47 (empty -> .)
    BREAK           reduce using rule 47 (empty -> .)
    ID              reduce using rule 47 (empty -> .)
    IF              reduce using rule 47 (empty -> .)
    WHILE           reduce using rule 47 (empty -> .)
    FOR             reduce using rule 47 (empty -> .)
    MINUS           reduce using rule 47 (empty -> .)
    PLUS            reduce using rule 47 (empty -> .)
    NUMBER          reduce using rule 47 (empty -> .)
    TRUE            reduce using rule 47 (empty -> .)
    FALSE           reduce using rule 47 (empty -> .)
    LPRAN           reduce using rule 47 (empty -> .)
    $end            reduce using rule 47 (empty -> .)
    RBRACE          reduce using rule 47 (empty -> .)

    elif                           shift and go to state 103
    else                           shift and go to state 82
    empty                          shift and go to state 84

state 103

    (16) elif -> ELIF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    MINUS           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    PLUS            reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
