Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTS
    DIV_EQUAL
    NOT

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> empty
Rule 3     statement -> assignment
Rule 4     statement -> if
Rule 5     statement -> while
Rule 6     statement -> for
Rule 7     statement -> expr
Rule 8     statement -> CONTINUE
Rule 9     statement -> BREAK
Rule 10    for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
Rule 11    params -> num_or_id
Rule 12    params -> num_or_id SEP num_or_id
Rule 13    params -> num_or_id SEP num_or_id SEP num_or_id
Rule 14    while -> WHILE expr COLON LBRACE statements RBRACE
Rule 15    if -> IF expr COLON LBRACE statements RBRACE elif
Rule 16    elif -> ELIF expr COLON LBRACE statements RBRACE elif
Rule 17    elif -> else
Rule 18    else -> ELSE COLON LBRACE statements RBRACE
Rule 19    else -> empty
Rule 20    assignment -> ID EQ expr
Rule 21    assignment -> ID PLUS_EQUAL expr
Rule 22    assignment -> ID MINUS_EQUAL expr
Rule 23    assignment -> ID TIMES_EQUAL expr
Rule 24    expr -> expr operator expr
Rule 25    expr -> expr relop expr
Rule 26    expr -> expr logic expr
Rule 27    expr -> num_or_id
Rule 28    expr -> TRUE
Rule 29    expr -> FALSE
Rule 30    operator -> TIMES
Rule 31    operator -> DIV
Rule 32    operator -> PLUS
Rule 33    operator -> MINUS
Rule 34    operator -> MOD
Rule 35    logic -> AND
Rule 36    logic -> OR
Rule 37    relop -> LT
Rule 38    relop -> LTE
Rule 39    relop -> GT
Rule 40    relop -> GTE
Rule 41    relop -> EQU
Rule 42    relop -> NEQU
Rule 43    expr -> LPRAN expr RPRAN
Rule 44    num_or_id -> NUMBER
Rule 45    num_or_id -> ID
Rule 46    empty -> <empty>

Terminals, with rules where they appear

AND                  : 35
BREAK                : 9
COLON                : 10 14 15 16 18
COMMENTS             : 
CONTINUE             : 8
DIV                  : 31
DIV_EQUAL            : 
ELIF                 : 16
ELSE                 : 18
EQ                   : 20
EQU                  : 41
FALSE                : 29
FOR                  : 10
GT                   : 39
GTE                  : 40
ID                   : 10 20 21 22 23 45
IF                   : 15
IN                   : 10
LBRACE               : 10 14 15 16 18
LPRAN                : 10 43
LT                   : 37
LTE                  : 38
MINUS                : 33
MINUS_EQUAL          : 22
MOD                  : 34
NEQU                 : 42
NOT                  : 
NUMBER               : 44
OR                   : 36
PLUS                 : 32
PLUS_EQUAL           : 21
RANGE                : 10
RBRACE               : 10 14 15 16 18
RPRAN                : 10 43
SEP                  : 12 13 13
TIMES                : 30
TIMES_EQUAL          : 23
TRUE                 : 28
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

assignment           : 3
elif                 : 15 16
else                 : 17
empty                : 2 19
expr                 : 7 14 15 16 20 21 22 23 24 24 25 25 26 26 43
for                  : 6
if                   : 4
logic                : 26
num_or_id            : 11 12 12 13 13 13 27
operator             : 24
params               : 10
relop                : 25
statement            : 1
statements           : 1 10 14 15 16 18 0
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)
    $end            reduce using rule 46 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    num_or_id                      shift and go to state 16

state 2

    (2) statements -> empty .

    CONTINUE        reduce using rule 2 (statements -> empty .)
    BREAK           reduce using rule 2 (statements -> empty .)
    ID              reduce using rule 2 (statements -> empty .)
    IF              reduce using rule 2 (statements -> empty .)
    WHILE           reduce using rule 2 (statements -> empty .)
    FOR             reduce using rule 2 (statements -> empty .)
    TRUE            reduce using rule 2 (statements -> empty .)
    FALSE           reduce using rule 2 (statements -> empty .)
    LPRAN           reduce using rule 2 (statements -> empty .)
    NUMBER          reduce using rule 2 (statements -> empty .)
    $end            reduce using rule 2 (statements -> empty .)
    RBRACE          reduce using rule 2 (statements -> empty .)


state 3

    (1) statements -> statements statement .

    CONTINUE        reduce using rule 1 (statements -> statements statement .)
    BREAK           reduce using rule 1 (statements -> statements statement .)
    ID              reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    TRUE            reduce using rule 1 (statements -> statements statement .)
    FALSE           reduce using rule 1 (statements -> statements statement .)
    LPRAN           reduce using rule 1 (statements -> statements statement .)
    NUMBER          reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    RBRACE          reduce using rule 1 (statements -> statements statement .)


state 4

    (3) statement -> assignment .

    CONTINUE        reduce using rule 3 (statement -> assignment .)
    BREAK           reduce using rule 3 (statement -> assignment .)
    ID              reduce using rule 3 (statement -> assignment .)
    IF              reduce using rule 3 (statement -> assignment .)
    WHILE           reduce using rule 3 (statement -> assignment .)
    FOR             reduce using rule 3 (statement -> assignment .)
    TRUE            reduce using rule 3 (statement -> assignment .)
    FALSE           reduce using rule 3 (statement -> assignment .)
    LPRAN           reduce using rule 3 (statement -> assignment .)
    NUMBER          reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)
    RBRACE          reduce using rule 3 (statement -> assignment .)


state 5

    (4) statement -> if .

    CONTINUE        reduce using rule 4 (statement -> if .)
    BREAK           reduce using rule 4 (statement -> if .)
    ID              reduce using rule 4 (statement -> if .)
    IF              reduce using rule 4 (statement -> if .)
    WHILE           reduce using rule 4 (statement -> if .)
    FOR             reduce using rule 4 (statement -> if .)
    TRUE            reduce using rule 4 (statement -> if .)
    FALSE           reduce using rule 4 (statement -> if .)
    LPRAN           reduce using rule 4 (statement -> if .)
    NUMBER          reduce using rule 4 (statement -> if .)
    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (5) statement -> while .

    CONTINUE        reduce using rule 5 (statement -> while .)
    BREAK           reduce using rule 5 (statement -> while .)
    ID              reduce using rule 5 (statement -> while .)
    IF              reduce using rule 5 (statement -> while .)
    WHILE           reduce using rule 5 (statement -> while .)
    FOR             reduce using rule 5 (statement -> while .)
    TRUE            reduce using rule 5 (statement -> while .)
    FALSE           reduce using rule 5 (statement -> while .)
    LPRAN           reduce using rule 5 (statement -> while .)
    NUMBER          reduce using rule 5 (statement -> while .)
    $end            reduce using rule 5 (statement -> while .)
    RBRACE          reduce using rule 5 (statement -> while .)


state 7

    (6) statement -> for .

    CONTINUE        reduce using rule 6 (statement -> for .)
    BREAK           reduce using rule 6 (statement -> for .)
    ID              reduce using rule 6 (statement -> for .)
    IF              reduce using rule 6 (statement -> for .)
    WHILE           reduce using rule 6 (statement -> for .)
    FOR             reduce using rule 6 (statement -> for .)
    TRUE            reduce using rule 6 (statement -> for .)
    FALSE           reduce using rule 6 (statement -> for .)
    LPRAN           reduce using rule 6 (statement -> for .)
    NUMBER          reduce using rule 6 (statement -> for .)
    $end            reduce using rule 6 (statement -> for .)
    RBRACE          reduce using rule 6 (statement -> for .)


state 8

    (7) statement -> expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    CONTINUE        reduce using rule 7 (statement -> expr .)
    BREAK           reduce using rule 7 (statement -> expr .)
    ID              reduce using rule 7 (statement -> expr .)
    IF              reduce using rule 7 (statement -> expr .)
    WHILE           reduce using rule 7 (statement -> expr .)
    FOR             reduce using rule 7 (statement -> expr .)
    TRUE            reduce using rule 7 (statement -> expr .)
    FALSE           reduce using rule 7 (statement -> expr .)
    LPRAN           reduce using rule 7 (statement -> expr .)
    NUMBER          reduce using rule 7 (statement -> expr .)
    $end            reduce using rule 7 (statement -> expr .)
    RBRACE          reduce using rule 7 (statement -> expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 9

    (8) statement -> CONTINUE .

    CONTINUE        reduce using rule 8 (statement -> CONTINUE .)
    BREAK           reduce using rule 8 (statement -> CONTINUE .)
    ID              reduce using rule 8 (statement -> CONTINUE .)
    IF              reduce using rule 8 (statement -> CONTINUE .)
    WHILE           reduce using rule 8 (statement -> CONTINUE .)
    FOR             reduce using rule 8 (statement -> CONTINUE .)
    TRUE            reduce using rule 8 (statement -> CONTINUE .)
    FALSE           reduce using rule 8 (statement -> CONTINUE .)
    LPRAN           reduce using rule 8 (statement -> CONTINUE .)
    NUMBER          reduce using rule 8 (statement -> CONTINUE .)
    $end            reduce using rule 8 (statement -> CONTINUE .)
    RBRACE          reduce using rule 8 (statement -> CONTINUE .)


state 10

    (9) statement -> BREAK .

    CONTINUE        reduce using rule 9 (statement -> BREAK .)
    BREAK           reduce using rule 9 (statement -> BREAK .)
    ID              reduce using rule 9 (statement -> BREAK .)
    IF              reduce using rule 9 (statement -> BREAK .)
    WHILE           reduce using rule 9 (statement -> BREAK .)
    FOR             reduce using rule 9 (statement -> BREAK .)
    TRUE            reduce using rule 9 (statement -> BREAK .)
    FALSE           reduce using rule 9 (statement -> BREAK .)
    LPRAN           reduce using rule 9 (statement -> BREAK .)
    NUMBER          reduce using rule 9 (statement -> BREAK .)
    $end            reduce using rule 9 (statement -> BREAK .)
    RBRACE          reduce using rule 9 (statement -> BREAK .)


state 11

    (20) assignment -> ID . EQ expr
    (21) assignment -> ID . PLUS_EQUAL expr
    (22) assignment -> ID . MINUS_EQUAL expr
    (23) assignment -> ID . TIMES_EQUAL expr
    (45) num_or_id -> ID .

    EQ              shift and go to state 36
    PLUS_EQUAL      shift and go to state 37
    MINUS_EQUAL     shift and go to state 38
    TIMES_EQUAL     shift and go to state 39
    TIMES           reduce using rule 45 (num_or_id -> ID .)
    DIV             reduce using rule 45 (num_or_id -> ID .)
    PLUS            reduce using rule 45 (num_or_id -> ID .)
    MINUS           reduce using rule 45 (num_or_id -> ID .)
    MOD             reduce using rule 45 (num_or_id -> ID .)
    LT              reduce using rule 45 (num_or_id -> ID .)
    LTE             reduce using rule 45 (num_or_id -> ID .)
    GT              reduce using rule 45 (num_or_id -> ID .)
    GTE             reduce using rule 45 (num_or_id -> ID .)
    EQU             reduce using rule 45 (num_or_id -> ID .)
    NEQU            reduce using rule 45 (num_or_id -> ID .)
    AND             reduce using rule 45 (num_or_id -> ID .)
    OR              reduce using rule 45 (num_or_id -> ID .)
    CONTINUE        reduce using rule 45 (num_or_id -> ID .)
    BREAK           reduce using rule 45 (num_or_id -> ID .)
    ID              reduce using rule 45 (num_or_id -> ID .)
    IF              reduce using rule 45 (num_or_id -> ID .)
    WHILE           reduce using rule 45 (num_or_id -> ID .)
    FOR             reduce using rule 45 (num_or_id -> ID .)
    TRUE            reduce using rule 45 (num_or_id -> ID .)
    FALSE           reduce using rule 45 (num_or_id -> ID .)
    LPRAN           reduce using rule 45 (num_or_id -> ID .)
    NUMBER          reduce using rule 45 (num_or_id -> ID .)
    $end            reduce using rule 45 (num_or_id -> ID .)
    RBRACE          reduce using rule 45 (num_or_id -> ID .)


state 12

    (15) if -> IF . expr COLON LBRACE statements RBRACE elif
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 40
    num_or_id                      shift and go to state 16

state 13

    (14) while -> WHILE . expr COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 42
    num_or_id                      shift and go to state 16

state 14

    (10) for -> FOR . ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    ID              shift and go to state 43


state 15

    (43) expr -> LPRAN . expr RPRAN
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 44
    num_or_id                      shift and go to state 16

state 16

    (27) expr -> num_or_id .

    TIMES           reduce using rule 27 (expr -> num_or_id .)
    DIV             reduce using rule 27 (expr -> num_or_id .)
    PLUS            reduce using rule 27 (expr -> num_or_id .)
    MINUS           reduce using rule 27 (expr -> num_or_id .)
    MOD             reduce using rule 27 (expr -> num_or_id .)
    LT              reduce using rule 27 (expr -> num_or_id .)
    LTE             reduce using rule 27 (expr -> num_or_id .)
    GT              reduce using rule 27 (expr -> num_or_id .)
    GTE             reduce using rule 27 (expr -> num_or_id .)
    EQU             reduce using rule 27 (expr -> num_or_id .)
    NEQU            reduce using rule 27 (expr -> num_or_id .)
    AND             reduce using rule 27 (expr -> num_or_id .)
    OR              reduce using rule 27 (expr -> num_or_id .)
    CONTINUE        reduce using rule 27 (expr -> num_or_id .)
    BREAK           reduce using rule 27 (expr -> num_or_id .)
    ID              reduce using rule 27 (expr -> num_or_id .)
    IF              reduce using rule 27 (expr -> num_or_id .)
    WHILE           reduce using rule 27 (expr -> num_or_id .)
    FOR             reduce using rule 27 (expr -> num_or_id .)
    TRUE            reduce using rule 27 (expr -> num_or_id .)
    FALSE           reduce using rule 27 (expr -> num_or_id .)
    LPRAN           reduce using rule 27 (expr -> num_or_id .)
    NUMBER          reduce using rule 27 (expr -> num_or_id .)
    $end            reduce using rule 27 (expr -> num_or_id .)
    COLON           reduce using rule 27 (expr -> num_or_id .)
    RPRAN           reduce using rule 27 (expr -> num_or_id .)
    RBRACE          reduce using rule 27 (expr -> num_or_id .)


state 17

    (28) expr -> TRUE .

    TIMES           reduce using rule 28 (expr -> TRUE .)
    DIV             reduce using rule 28 (expr -> TRUE .)
    PLUS            reduce using rule 28 (expr -> TRUE .)
    MINUS           reduce using rule 28 (expr -> TRUE .)
    MOD             reduce using rule 28 (expr -> TRUE .)
    LT              reduce using rule 28 (expr -> TRUE .)
    LTE             reduce using rule 28 (expr -> TRUE .)
    GT              reduce using rule 28 (expr -> TRUE .)
    GTE             reduce using rule 28 (expr -> TRUE .)
    EQU             reduce using rule 28 (expr -> TRUE .)
    NEQU            reduce using rule 28 (expr -> TRUE .)
    AND             reduce using rule 28 (expr -> TRUE .)
    OR              reduce using rule 28 (expr -> TRUE .)
    CONTINUE        reduce using rule 28 (expr -> TRUE .)
    BREAK           reduce using rule 28 (expr -> TRUE .)
    ID              reduce using rule 28 (expr -> TRUE .)
    IF              reduce using rule 28 (expr -> TRUE .)
    WHILE           reduce using rule 28 (expr -> TRUE .)
    FOR             reduce using rule 28 (expr -> TRUE .)
    TRUE            reduce using rule 28 (expr -> TRUE .)
    FALSE           reduce using rule 28 (expr -> TRUE .)
    LPRAN           reduce using rule 28 (expr -> TRUE .)
    NUMBER          reduce using rule 28 (expr -> TRUE .)
    $end            reduce using rule 28 (expr -> TRUE .)
    COLON           reduce using rule 28 (expr -> TRUE .)
    RPRAN           reduce using rule 28 (expr -> TRUE .)
    RBRACE          reduce using rule 28 (expr -> TRUE .)


state 18

    (29) expr -> FALSE .

    TIMES           reduce using rule 29 (expr -> FALSE .)
    DIV             reduce using rule 29 (expr -> FALSE .)
    PLUS            reduce using rule 29 (expr -> FALSE .)
    MINUS           reduce using rule 29 (expr -> FALSE .)
    MOD             reduce using rule 29 (expr -> FALSE .)
    LT              reduce using rule 29 (expr -> FALSE .)
    LTE             reduce using rule 29 (expr -> FALSE .)
    GT              reduce using rule 29 (expr -> FALSE .)
    GTE             reduce using rule 29 (expr -> FALSE .)
    EQU             reduce using rule 29 (expr -> FALSE .)
    NEQU            reduce using rule 29 (expr -> FALSE .)
    AND             reduce using rule 29 (expr -> FALSE .)
    OR              reduce using rule 29 (expr -> FALSE .)
    CONTINUE        reduce using rule 29 (expr -> FALSE .)
    BREAK           reduce using rule 29 (expr -> FALSE .)
    ID              reduce using rule 29 (expr -> FALSE .)
    IF              reduce using rule 29 (expr -> FALSE .)
    WHILE           reduce using rule 29 (expr -> FALSE .)
    FOR             reduce using rule 29 (expr -> FALSE .)
    TRUE            reduce using rule 29 (expr -> FALSE .)
    FALSE           reduce using rule 29 (expr -> FALSE .)
    LPRAN           reduce using rule 29 (expr -> FALSE .)
    NUMBER          reduce using rule 29 (expr -> FALSE .)
    $end            reduce using rule 29 (expr -> FALSE .)
    COLON           reduce using rule 29 (expr -> FALSE .)
    RPRAN           reduce using rule 29 (expr -> FALSE .)
    RBRACE          reduce using rule 29 (expr -> FALSE .)


state 19

    (44) num_or_id -> NUMBER .

    TIMES           reduce using rule 44 (num_or_id -> NUMBER .)
    DIV             reduce using rule 44 (num_or_id -> NUMBER .)
    PLUS            reduce using rule 44 (num_or_id -> NUMBER .)
    MINUS           reduce using rule 44 (num_or_id -> NUMBER .)
    MOD             reduce using rule 44 (num_or_id -> NUMBER .)
    LT              reduce using rule 44 (num_or_id -> NUMBER .)
    LTE             reduce using rule 44 (num_or_id -> NUMBER .)
    GT              reduce using rule 44 (num_or_id -> NUMBER .)
    GTE             reduce using rule 44 (num_or_id -> NUMBER .)
    EQU             reduce using rule 44 (num_or_id -> NUMBER .)
    NEQU            reduce using rule 44 (num_or_id -> NUMBER .)
    AND             reduce using rule 44 (num_or_id -> NUMBER .)
    OR              reduce using rule 44 (num_or_id -> NUMBER .)
    CONTINUE        reduce using rule 44 (num_or_id -> NUMBER .)
    BREAK           reduce using rule 44 (num_or_id -> NUMBER .)
    ID              reduce using rule 44 (num_or_id -> NUMBER .)
    IF              reduce using rule 44 (num_or_id -> NUMBER .)
    WHILE           reduce using rule 44 (num_or_id -> NUMBER .)
    FOR             reduce using rule 44 (num_or_id -> NUMBER .)
    TRUE            reduce using rule 44 (num_or_id -> NUMBER .)
    FALSE           reduce using rule 44 (num_or_id -> NUMBER .)
    LPRAN           reduce using rule 44 (num_or_id -> NUMBER .)
    NUMBER          reduce using rule 44 (num_or_id -> NUMBER .)
    $end            reduce using rule 44 (num_or_id -> NUMBER .)
    COLON           reduce using rule 44 (num_or_id -> NUMBER .)
    RPRAN           reduce using rule 44 (num_or_id -> NUMBER .)
    RBRACE          reduce using rule 44 (num_or_id -> NUMBER .)
    SEP             reduce using rule 44 (num_or_id -> NUMBER .)


state 20

    (24) expr -> expr operator . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 45
    num_or_id                      shift and go to state 16

state 21

    (25) expr -> expr relop . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 46
    num_or_id                      shift and go to state 16

state 22

    (26) expr -> expr logic . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 47
    num_or_id                      shift and go to state 16

state 23

    (30) operator -> TIMES .

    TRUE            reduce using rule 30 (operator -> TIMES .)
    FALSE           reduce using rule 30 (operator -> TIMES .)
    LPRAN           reduce using rule 30 (operator -> TIMES .)
    NUMBER          reduce using rule 30 (operator -> TIMES .)
    ID              reduce using rule 30 (operator -> TIMES .)


state 24

    (31) operator -> DIV .

    TRUE            reduce using rule 31 (operator -> DIV .)
    FALSE           reduce using rule 31 (operator -> DIV .)
    LPRAN           reduce using rule 31 (operator -> DIV .)
    NUMBER          reduce using rule 31 (operator -> DIV .)
    ID              reduce using rule 31 (operator -> DIV .)


state 25

    (32) operator -> PLUS .

    TRUE            reduce using rule 32 (operator -> PLUS .)
    FALSE           reduce using rule 32 (operator -> PLUS .)
    LPRAN           reduce using rule 32 (operator -> PLUS .)
    NUMBER          reduce using rule 32 (operator -> PLUS .)
    ID              reduce using rule 32 (operator -> PLUS .)


state 26

    (33) operator -> MINUS .

    TRUE            reduce using rule 33 (operator -> MINUS .)
    FALSE           reduce using rule 33 (operator -> MINUS .)
    LPRAN           reduce using rule 33 (operator -> MINUS .)
    NUMBER          reduce using rule 33 (operator -> MINUS .)
    ID              reduce using rule 33 (operator -> MINUS .)


state 27

    (34) operator -> MOD .

    TRUE            reduce using rule 34 (operator -> MOD .)
    FALSE           reduce using rule 34 (operator -> MOD .)
    LPRAN           reduce using rule 34 (operator -> MOD .)
    NUMBER          reduce using rule 34 (operator -> MOD .)
    ID              reduce using rule 34 (operator -> MOD .)


state 28

    (37) relop -> LT .

    TRUE            reduce using rule 37 (relop -> LT .)
    FALSE           reduce using rule 37 (relop -> LT .)
    LPRAN           reduce using rule 37 (relop -> LT .)
    NUMBER          reduce using rule 37 (relop -> LT .)
    ID              reduce using rule 37 (relop -> LT .)


state 29

    (38) relop -> LTE .

    TRUE            reduce using rule 38 (relop -> LTE .)
    FALSE           reduce using rule 38 (relop -> LTE .)
    LPRAN           reduce using rule 38 (relop -> LTE .)
    NUMBER          reduce using rule 38 (relop -> LTE .)
    ID              reduce using rule 38 (relop -> LTE .)


state 30

    (39) relop -> GT .

    TRUE            reduce using rule 39 (relop -> GT .)
    FALSE           reduce using rule 39 (relop -> GT .)
    LPRAN           reduce using rule 39 (relop -> GT .)
    NUMBER          reduce using rule 39 (relop -> GT .)
    ID              reduce using rule 39 (relop -> GT .)


state 31

    (40) relop -> GTE .

    TRUE            reduce using rule 40 (relop -> GTE .)
    FALSE           reduce using rule 40 (relop -> GTE .)
    LPRAN           reduce using rule 40 (relop -> GTE .)
    NUMBER          reduce using rule 40 (relop -> GTE .)
    ID              reduce using rule 40 (relop -> GTE .)


state 32

    (41) relop -> EQU .

    TRUE            reduce using rule 41 (relop -> EQU .)
    FALSE           reduce using rule 41 (relop -> EQU .)
    LPRAN           reduce using rule 41 (relop -> EQU .)
    NUMBER          reduce using rule 41 (relop -> EQU .)
    ID              reduce using rule 41 (relop -> EQU .)


state 33

    (42) relop -> NEQU .

    TRUE            reduce using rule 42 (relop -> NEQU .)
    FALSE           reduce using rule 42 (relop -> NEQU .)
    LPRAN           reduce using rule 42 (relop -> NEQU .)
    NUMBER          reduce using rule 42 (relop -> NEQU .)
    ID              reduce using rule 42 (relop -> NEQU .)


state 34

    (35) logic -> AND .

    TRUE            reduce using rule 35 (logic -> AND .)
    FALSE           reduce using rule 35 (logic -> AND .)
    LPRAN           reduce using rule 35 (logic -> AND .)
    NUMBER          reduce using rule 35 (logic -> AND .)
    ID              reduce using rule 35 (logic -> AND .)


state 35

    (36) logic -> OR .

    TRUE            reduce using rule 36 (logic -> OR .)
    FALSE           reduce using rule 36 (logic -> OR .)
    LPRAN           reduce using rule 36 (logic -> OR .)
    NUMBER          reduce using rule 36 (logic -> OR .)
    ID              reduce using rule 36 (logic -> OR .)


state 36

    (20) assignment -> ID EQ . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 48
    num_or_id                      shift and go to state 16

state 37

    (21) assignment -> ID PLUS_EQUAL . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 49
    num_or_id                      shift and go to state 16

state 38

    (22) assignment -> ID MINUS_EQUAL . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 50
    num_or_id                      shift and go to state 16

state 39

    (23) assignment -> ID TIMES_EQUAL . expr
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 51
    num_or_id                      shift and go to state 16

state 40

    (15) if -> IF expr . COLON LBRACE statements RBRACE elif
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    COLON           shift and go to state 52
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 41

    (45) num_or_id -> ID .

    COLON           reduce using rule 45 (num_or_id -> ID .)
    TIMES           reduce using rule 45 (num_or_id -> ID .)
    DIV             reduce using rule 45 (num_or_id -> ID .)
    PLUS            reduce using rule 45 (num_or_id -> ID .)
    MINUS           reduce using rule 45 (num_or_id -> ID .)
    MOD             reduce using rule 45 (num_or_id -> ID .)
    LT              reduce using rule 45 (num_or_id -> ID .)
    LTE             reduce using rule 45 (num_or_id -> ID .)
    GT              reduce using rule 45 (num_or_id -> ID .)
    GTE             reduce using rule 45 (num_or_id -> ID .)
    EQU             reduce using rule 45 (num_or_id -> ID .)
    NEQU            reduce using rule 45 (num_or_id -> ID .)
    AND             reduce using rule 45 (num_or_id -> ID .)
    OR              reduce using rule 45 (num_or_id -> ID .)
    RPRAN           reduce using rule 45 (num_or_id -> ID .)
    CONTINUE        reduce using rule 45 (num_or_id -> ID .)
    BREAK           reduce using rule 45 (num_or_id -> ID .)
    ID              reduce using rule 45 (num_or_id -> ID .)
    IF              reduce using rule 45 (num_or_id -> ID .)
    WHILE           reduce using rule 45 (num_or_id -> ID .)
    FOR             reduce using rule 45 (num_or_id -> ID .)
    TRUE            reduce using rule 45 (num_or_id -> ID .)
    FALSE           reduce using rule 45 (num_or_id -> ID .)
    LPRAN           reduce using rule 45 (num_or_id -> ID .)
    NUMBER          reduce using rule 45 (num_or_id -> ID .)
    $end            reduce using rule 45 (num_or_id -> ID .)
    RBRACE          reduce using rule 45 (num_or_id -> ID .)
    SEP             reduce using rule 45 (num_or_id -> ID .)


state 42

    (14) while -> WHILE expr . COLON LBRACE statements RBRACE
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    COLON           shift and go to state 53
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 43

    (10) for -> FOR ID . IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    IN              shift and go to state 54


state 44

    (43) expr -> LPRAN expr . RPRAN
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    RPRAN           shift and go to state 55
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 45

    (24) expr -> expr operator expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CONTINUE        reduce using rule 24 (expr -> expr operator expr .)
    BREAK           reduce using rule 24 (expr -> expr operator expr .)
    ID              reduce using rule 24 (expr -> expr operator expr .)
    IF              reduce using rule 24 (expr -> expr operator expr .)
    WHILE           reduce using rule 24 (expr -> expr operator expr .)
    FOR             reduce using rule 24 (expr -> expr operator expr .)
    TRUE            reduce using rule 24 (expr -> expr operator expr .)
    FALSE           reduce using rule 24 (expr -> expr operator expr .)
    LPRAN           reduce using rule 24 (expr -> expr operator expr .)
    NUMBER          reduce using rule 24 (expr -> expr operator expr .)
    $end            reduce using rule 24 (expr -> expr operator expr .)
    COLON           reduce using rule 24 (expr -> expr operator expr .)
    RPRAN           reduce using rule 24 (expr -> expr operator expr .)
    RBRACE          reduce using rule 24 (expr -> expr operator expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

  ! TIMES           [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! DIV             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! LT              [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! LTE             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! GT              [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! GTE             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! EQU             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! NEQU            [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr operator expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr operator expr .) ]

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 46

    (25) expr -> expr relop expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CONTINUE        reduce using rule 25 (expr -> expr relop expr .)
    BREAK           reduce using rule 25 (expr -> expr relop expr .)
    ID              reduce using rule 25 (expr -> expr relop expr .)
    IF              reduce using rule 25 (expr -> expr relop expr .)
    WHILE           reduce using rule 25 (expr -> expr relop expr .)
    FOR             reduce using rule 25 (expr -> expr relop expr .)
    TRUE            reduce using rule 25 (expr -> expr relop expr .)
    FALSE           reduce using rule 25 (expr -> expr relop expr .)
    LPRAN           reduce using rule 25 (expr -> expr relop expr .)
    NUMBER          reduce using rule 25 (expr -> expr relop expr .)
    $end            reduce using rule 25 (expr -> expr relop expr .)
    COLON           reduce using rule 25 (expr -> expr relop expr .)
    RPRAN           reduce using rule 25 (expr -> expr relop expr .)
    RBRACE          reduce using rule 25 (expr -> expr relop expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

  ! TIMES           [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! DIV             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! LT              [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! LTE             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! GT              [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! GTE             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! EQU             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! NEQU            [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr relop expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr relop expr .) ]

    relop                          shift and go to state 21
    operator                       shift and go to state 20
    logic                          shift and go to state 22

state 47

    (26) expr -> expr logic expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CONTINUE        reduce using rule 26 (expr -> expr logic expr .)
    BREAK           reduce using rule 26 (expr -> expr logic expr .)
    ID              reduce using rule 26 (expr -> expr logic expr .)
    IF              reduce using rule 26 (expr -> expr logic expr .)
    WHILE           reduce using rule 26 (expr -> expr logic expr .)
    FOR             reduce using rule 26 (expr -> expr logic expr .)
    TRUE            reduce using rule 26 (expr -> expr logic expr .)
    FALSE           reduce using rule 26 (expr -> expr logic expr .)
    LPRAN           reduce using rule 26 (expr -> expr logic expr .)
    NUMBER          reduce using rule 26 (expr -> expr logic expr .)
    $end            reduce using rule 26 (expr -> expr logic expr .)
    COLON           reduce using rule 26 (expr -> expr logic expr .)
    RPRAN           reduce using rule 26 (expr -> expr logic expr .)
    RBRACE          reduce using rule 26 (expr -> expr logic expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

  ! TIMES           [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! DIV             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! LT              [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! LTE             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! GT              [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! GTE             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! EQU             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! NEQU            [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr logic expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr logic expr .) ]

    logic                          shift and go to state 22
    operator                       shift and go to state 20
    relop                          shift and go to state 21

state 48

    (20) assignment -> ID EQ expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    CONTINUE        reduce using rule 20 (assignment -> ID EQ expr .)
    BREAK           reduce using rule 20 (assignment -> ID EQ expr .)
    ID              reduce using rule 20 (assignment -> ID EQ expr .)
    IF              reduce using rule 20 (assignment -> ID EQ expr .)
    WHILE           reduce using rule 20 (assignment -> ID EQ expr .)
    FOR             reduce using rule 20 (assignment -> ID EQ expr .)
    TRUE            reduce using rule 20 (assignment -> ID EQ expr .)
    FALSE           reduce using rule 20 (assignment -> ID EQ expr .)
    LPRAN           reduce using rule 20 (assignment -> ID EQ expr .)
    NUMBER          reduce using rule 20 (assignment -> ID EQ expr .)
    $end            reduce using rule 20 (assignment -> ID EQ expr .)
    RBRACE          reduce using rule 20 (assignment -> ID EQ expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 49

    (21) assignment -> ID PLUS_EQUAL expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    CONTINUE        reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    BREAK           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    ID              reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    IF              reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    WHILE           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    FOR             reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    TRUE            reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    FALSE           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    LPRAN           reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    NUMBER          reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    $end            reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    RBRACE          reduce using rule 21 (assignment -> ID PLUS_EQUAL expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 50

    (22) assignment -> ID MINUS_EQUAL expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    CONTINUE        reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    BREAK           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    ID              reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    IF              reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    WHILE           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    FOR             reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    TRUE            reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    FALSE           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    LPRAN           reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    NUMBER          reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    $end            reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    RBRACE          reduce using rule 22 (assignment -> ID MINUS_EQUAL expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 51

    (23) assignment -> ID TIMES_EQUAL expr .
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    CONTINUE        reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    BREAK           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    ID              reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    IF              reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    WHILE           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    FOR             reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    TRUE            reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    FALSE           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    LPRAN           reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    NUMBER          reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    $end            reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    RBRACE          reduce using rule 23 (assignment -> ID TIMES_EQUAL expr .)
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 52

    (15) if -> IF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 56


state 53

    (14) while -> WHILE expr COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 57


state 54

    (10) for -> FOR ID IN . RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    RANGE           shift and go to state 58


state 55

    (43) expr -> LPRAN expr RPRAN .

    TIMES           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    DIV             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    PLUS            reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    MINUS           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    MOD             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    LT              reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    LTE             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    GT              reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    GTE             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    EQU             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    NEQU            reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    AND             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    OR              reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    CONTINUE        reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    BREAK           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    ID              reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    IF              reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    WHILE           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    FOR             reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    TRUE            reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    FALSE           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    LPRAN           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    NUMBER          reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    $end            reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    COLON           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    RPRAN           reduce using rule 43 (expr -> LPRAN expr RPRAN .)
    RBRACE          reduce using rule 43 (expr -> LPRAN expr RPRAN .)


state 56

    (15) if -> IF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    RBRACE          reduce using rule 46 (empty -> .)
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)

    statements                     shift and go to state 59
    empty                          shift and go to state 2

state 57

    (14) while -> WHILE expr COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    RBRACE          reduce using rule 46 (empty -> .)
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)

    statements                     shift and go to state 60
    empty                          shift and go to state 2

state 58

    (10) for -> FOR ID IN RANGE . LPRAN params RPRAN COLON LBRACE statements RBRACE

    LPRAN           shift and go to state 61


state 59

    (15) if -> IF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    RBRACE          shift and go to state 62
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    num_or_id                      shift and go to state 16

state 60

    (14) while -> WHILE expr COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    RBRACE          shift and go to state 63
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    num_or_id                      shift and go to state 16

state 61

    (10) for -> FOR ID IN RANGE LPRAN . params RPRAN COLON LBRACE statements RBRACE
    (11) params -> . num_or_id
    (12) params -> . num_or_id SEP num_or_id
    (13) params -> . num_or_id SEP num_or_id SEP num_or_id
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    params                         shift and go to state 64
    num_or_id                      shift and go to state 65

state 62

    (15) if -> IF expr COLON LBRACE statements RBRACE . elif
    (16) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (17) elif -> . else
    (18) else -> . ELSE COLON LBRACE statements RBRACE
    (19) else -> . empty
    (46) empty -> .

    ELIF            shift and go to state 67
    ELSE            shift and go to state 69
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)
    $end            reduce using rule 46 (empty -> .)
    RBRACE          reduce using rule 46 (empty -> .)

    elif                           shift and go to state 66
    else                           shift and go to state 68
    empty                          shift and go to state 70

state 63

    (14) while -> WHILE expr COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    ID              reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    IF              reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    $end            reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 14 (while -> WHILE expr COLON LBRACE statements RBRACE .)


state 64

    (10) for -> FOR ID IN RANGE LPRAN params . RPRAN COLON LBRACE statements RBRACE

    RPRAN           shift and go to state 71


state 65

    (11) params -> num_or_id .
    (12) params -> num_or_id . SEP num_or_id
    (13) params -> num_or_id . SEP num_or_id SEP num_or_id

    RPRAN           reduce using rule 11 (params -> num_or_id .)
    SEP             shift and go to state 72


state 66

    (15) if -> IF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 15 (if -> IF expr COLON LBRACE statements RBRACE elif .)


state 67

    (16) elif -> ELIF . expr COLON LBRACE statements RBRACE elif
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    expr                           shift and go to state 73
    num_or_id                      shift and go to state 16

state 68

    (17) elif -> else .

    CONTINUE        reduce using rule 17 (elif -> else .)
    BREAK           reduce using rule 17 (elif -> else .)
    ID              reduce using rule 17 (elif -> else .)
    IF              reduce using rule 17 (elif -> else .)
    WHILE           reduce using rule 17 (elif -> else .)
    FOR             reduce using rule 17 (elif -> else .)
    TRUE            reduce using rule 17 (elif -> else .)
    FALSE           reduce using rule 17 (elif -> else .)
    LPRAN           reduce using rule 17 (elif -> else .)
    NUMBER          reduce using rule 17 (elif -> else .)
    $end            reduce using rule 17 (elif -> else .)
    RBRACE          reduce using rule 17 (elif -> else .)


state 69

    (18) else -> ELSE . COLON LBRACE statements RBRACE

    COLON           shift and go to state 74


state 70

    (19) else -> empty .

    CONTINUE        reduce using rule 19 (else -> empty .)
    BREAK           reduce using rule 19 (else -> empty .)
    ID              reduce using rule 19 (else -> empty .)
    IF              reduce using rule 19 (else -> empty .)
    WHILE           reduce using rule 19 (else -> empty .)
    FOR             reduce using rule 19 (else -> empty .)
    TRUE            reduce using rule 19 (else -> empty .)
    FALSE           reduce using rule 19 (else -> empty .)
    LPRAN           reduce using rule 19 (else -> empty .)
    NUMBER          reduce using rule 19 (else -> empty .)
    $end            reduce using rule 19 (else -> empty .)
    RBRACE          reduce using rule 19 (else -> empty .)


state 71

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN . COLON LBRACE statements RBRACE

    COLON           shift and go to state 75


state 72

    (12) params -> num_or_id SEP . num_or_id
    (13) params -> num_or_id SEP . num_or_id SEP num_or_id
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    num_or_id                      shift and go to state 76

state 73

    (16) elif -> ELIF expr . COLON LBRACE statements RBRACE elif
    (24) expr -> expr . operator expr
    (25) expr -> expr . relop expr
    (26) expr -> expr . logic expr
    (30) operator -> . TIMES
    (31) operator -> . DIV
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . MOD
    (37) relop -> . LT
    (38) relop -> . LTE
    (39) relop -> . GT
    (40) relop -> . GTE
    (41) relop -> . EQU
    (42) relop -> . NEQU
    (35) logic -> . AND
    (36) logic -> . OR

    COLON           shift and go to state 77
    TIMES           shift and go to state 23
    DIV             shift and go to state 24
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    MOD             shift and go to state 27
    LT              shift and go to state 28
    LTE             shift and go to state 29
    GT              shift and go to state 30
    GTE             shift and go to state 31
    EQU             shift and go to state 32
    NEQU            shift and go to state 33
    AND             shift and go to state 34
    OR              shift and go to state 35

    operator                       shift and go to state 20
    relop                          shift and go to state 21
    logic                          shift and go to state 22

state 74

    (18) else -> ELSE COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 78


state 75

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 79


state 76

    (12) params -> num_or_id SEP num_or_id .
    (13) params -> num_or_id SEP num_or_id . SEP num_or_id

    RPRAN           reduce using rule 12 (params -> num_or_id SEP num_or_id .)
    SEP             shift and go to state 80


state 77

    (16) elif -> ELIF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 81


state 78

    (18) else -> ELSE COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    RBRACE          reduce using rule 46 (empty -> .)
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)

    statements                     shift and go to state 82
    empty                          shift and go to state 2

state 79

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    RBRACE          reduce using rule 46 (empty -> .)
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)

    statements                     shift and go to state 83
    empty                          shift and go to state 2

state 80

    (13) params -> num_or_id SEP num_or_id SEP . num_or_id
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    NUMBER          shift and go to state 19
    ID              shift and go to state 41

    num_or_id                      shift and go to state 84

state 81

    (16) elif -> ELIF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (46) empty -> .

    RBRACE          reduce using rule 46 (empty -> .)
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)

    statements                     shift and go to state 85
    empty                          shift and go to state 2

state 82

    (18) else -> ELSE COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    RBRACE          shift and go to state 86
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    num_or_id                      shift and go to state 16

state 83

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    RBRACE          shift and go to state 87
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    num_or_id                      shift and go to state 16

state 84

    (13) params -> num_or_id SEP num_or_id SEP num_or_id .

    RPRAN           reduce using rule 13 (params -> num_or_id SEP num_or_id SEP num_or_id .)


state 85

    (16) elif -> ELIF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . CONTINUE
    (9) statement -> . BREAK
    (20) assignment -> . ID EQ expr
    (21) assignment -> . ID PLUS_EQUAL expr
    (22) assignment -> . ID MINUS_EQUAL expr
    (23) assignment -> . ID TIMES_EQUAL expr
    (15) if -> . IF expr COLON LBRACE statements RBRACE elif
    (14) while -> . WHILE expr COLON LBRACE statements RBRACE
    (10) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (24) expr -> . expr operator expr
    (25) expr -> . expr relop expr
    (26) expr -> . expr logic expr
    (27) expr -> . num_or_id
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (43) expr -> . LPRAN expr RPRAN
    (44) num_or_id -> . NUMBER
    (45) num_or_id -> . ID

    RBRACE          shift and go to state 88
    CONTINUE        shift and go to state 9
    BREAK           shift and go to state 10
    ID              shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18
    LPRAN           shift and go to state 15
    NUMBER          shift and go to state 19

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    num_or_id                      shift and go to state 16

state 86

    (18) else -> ELSE COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    ID              reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    IF              reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    $end            reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (else -> ELSE COLON LBRACE statements RBRACE .)


state 87

    (10) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    ID              reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    IF              reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    $end            reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 10 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)


state 88

    (16) elif -> ELIF expr COLON LBRACE statements RBRACE . elif
    (16) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (17) elif -> . else
    (18) else -> . ELSE COLON LBRACE statements RBRACE
    (19) else -> . empty
    (46) empty -> .

    ELIF            shift and go to state 67
    ELSE            shift and go to state 69
    CONTINUE        reduce using rule 46 (empty -> .)
    BREAK           reduce using rule 46 (empty -> .)
    ID              reduce using rule 46 (empty -> .)
    IF              reduce using rule 46 (empty -> .)
    WHILE           reduce using rule 46 (empty -> .)
    FOR             reduce using rule 46 (empty -> .)
    TRUE            reduce using rule 46 (empty -> .)
    FALSE           reduce using rule 46 (empty -> .)
    LPRAN           reduce using rule 46 (empty -> .)
    NUMBER          reduce using rule 46 (empty -> .)
    $end            reduce using rule 46 (empty -> .)
    RBRACE          reduce using rule 46 (empty -> .)

    elif                           shift and go to state 89
    else                           shift and go to state 68
    empty                          shift and go to state 70

state 89

    (16) elif -> ELIF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 16 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 45 resolved as shift
WARNING: shift/reduce conflict for DIV in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MOD in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for LTE in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for GTE in state 45 resolved as shift
WARNING: shift/reduce conflict for EQU in state 45 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIV in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MOD in state 46 resolved as shift
WARNING: shift/reduce conflict for LT in state 46 resolved as shift
WARNING: shift/reduce conflict for LTE in state 46 resolved as shift
WARNING: shift/reduce conflict for GT in state 46 resolved as shift
WARNING: shift/reduce conflict for GTE in state 46 resolved as shift
WARNING: shift/reduce conflict for EQU in state 46 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 47 resolved as shift
WARNING: shift/reduce conflict for DIV in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MOD in state 47 resolved as shift
WARNING: shift/reduce conflict for LT in state 47 resolved as shift
WARNING: shift/reduce conflict for LTE in state 47 resolved as shift
WARNING: shift/reduce conflict for GT in state 47 resolved as shift
WARNING: shift/reduce conflict for GTE in state 47 resolved as shift
WARNING: shift/reduce conflict for EQU in state 47 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
