Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTS
    NOT

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> empty
Rule 3     statement -> assignment
Rule 4     statement -> if
Rule 5     statement -> while
Rule 6     statement -> for
Rule 7     statement -> expr
Rule 8     statement -> print
Rule 9     statement -> CONTINUE
Rule 10    statement -> BREAK
Rule 11    print -> PRINT LPRAN STRING_LITERAL print_args RPRAN
Rule 12    print_args -> expr
Rule 13    print_args -> empty
Rule 14    for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
Rule 15    params -> num_or_id
Rule 16    params -> num_or_id SEP num_or_id
Rule 17    params -> num_or_id SEP num_or_id SEP num_or_id
Rule 18    while -> WHILE expr COLON LBRACE statements RBRACE
Rule 19    if -> IF expr COLON LBRACE statements RBRACE elif
Rule 20    elif -> ELIF expr COLON LBRACE statements RBRACE elif
Rule 21    elif -> else
Rule 22    else -> ELSE COLON LBRACE statements RBRACE
Rule 23    else -> empty
Rule 24    assignment -> ID EQ expr
Rule 25    assignment -> ID PLUS_EQUAL expr
Rule 26    assignment -> ID MINUS_EQUAL expr
Rule 27    assignment -> ID TIMES_EQUAL expr
Rule 28    assignment -> ID DIV_EQUAL expr
Rule 29    expr -> MINUS expr
Rule 30    expr -> PLUS expr
Rule 31    expr -> expr PLUS expr
Rule 32    expr -> expr MINUS expr
Rule 33    expr -> expr TIMES expr
Rule 34    expr -> expr DIV expr
Rule 35    expr -> expr MOD expr
Rule 36    expr -> expr AND expr
Rule 37    expr -> expr OR expr
Rule 38    expr -> expr LT expr
Rule 39    expr -> expr LTE expr
Rule 40    expr -> expr GT expr
Rule 41    expr -> expr GTE expr
Rule 42    expr -> expr EQU expr
Rule 43    expr -> expr NEQU expr
Rule 44    expr -> ID
Rule 45    expr -> NUMBER
Rule 46    expr -> TRUE
Rule 47    expr -> FALSE
Rule 48    expr -> LPRAN expr RPRAN
Rule 49    num_or_id -> NUMBER
Rule 50    num_or_id -> ID
Rule 51    empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
BREAK                : 10
COLON                : 14 18 19 20 22
COMMENTS             : 
CONTINUE             : 9
DIV                  : 34
DIV_EQUAL            : 28
ELIF                 : 20
ELSE                 : 22
EQ                   : 24
EQU                  : 42
FALSE                : 47
FOR                  : 14
GT                   : 40
GTE                  : 41
ID                   : 14 24 25 26 27 28 44 50
IF                   : 19
IN                   : 14
LBRACE               : 14 18 19 20 22
LPRAN                : 11 14 48
LT                   : 38
LTE                  : 39
MINUS                : 29 32
MINUS_EQUAL          : 26
MOD                  : 35
NEQU                 : 43
NOT                  : 
NUMBER               : 45 49
OR                   : 37
PLUS                 : 30 31
PLUS_EQUAL           : 25
PRINT                : 11
RANGE                : 14
RBRACE               : 14 18 19 20 22
RPRAN                : 11 14 48
SEP                  : 16 17 17
STRING_LITERAL       : 11
TIMES                : 33
TIMES_EQUAL          : 27
TRUE                 : 46
WHILE                : 18
error                : 

Nonterminals, with rules where they appear

assignment           : 3
elif                 : 19 20
else                 : 21
empty                : 2 13 23
expr                 : 7 12 18 19 20 24 25 26 27 28 29 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 48
for                  : 6
if                   : 4
num_or_id            : 15 16 16 17 17 17
params               : 14
print                : 8
print_args           : 11
statement            : 1
statements           : 1 14 18 19 20 22 0
while                : 5

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    print                          shift and go to state 9

state 2

    (2) statements -> empty .

    CONTINUE        reduce using rule 2 (statements -> empty .)
    BREAK           reduce using rule 2 (statements -> empty .)
    ID              reduce using rule 2 (statements -> empty .)
    IF              reduce using rule 2 (statements -> empty .)
    WHILE           reduce using rule 2 (statements -> empty .)
    FOR             reduce using rule 2 (statements -> empty .)
    MINUS           reduce using rule 2 (statements -> empty .)
    PLUS            reduce using rule 2 (statements -> empty .)
    NUMBER          reduce using rule 2 (statements -> empty .)
    TRUE            reduce using rule 2 (statements -> empty .)
    FALSE           reduce using rule 2 (statements -> empty .)
    LPRAN           reduce using rule 2 (statements -> empty .)
    PRINT           reduce using rule 2 (statements -> empty .)
    $end            reduce using rule 2 (statements -> empty .)
    RBRACE          reduce using rule 2 (statements -> empty .)


state 3

    (1) statements -> statements statement .

    CONTINUE        reduce using rule 1 (statements -> statements statement .)
    BREAK           reduce using rule 1 (statements -> statements statement .)
    ID              reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    WHILE           reduce using rule 1 (statements -> statements statement .)
    FOR             reduce using rule 1 (statements -> statements statement .)
    MINUS           reduce using rule 1 (statements -> statements statement .)
    PLUS            reduce using rule 1 (statements -> statements statement .)
    NUMBER          reduce using rule 1 (statements -> statements statement .)
    TRUE            reduce using rule 1 (statements -> statements statement .)
    FALSE           reduce using rule 1 (statements -> statements statement .)
    LPRAN           reduce using rule 1 (statements -> statements statement .)
    PRINT           reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    RBRACE          reduce using rule 1 (statements -> statements statement .)


state 4

    (3) statement -> assignment .

    CONTINUE        reduce using rule 3 (statement -> assignment .)
    BREAK           reduce using rule 3 (statement -> assignment .)
    ID              reduce using rule 3 (statement -> assignment .)
    IF              reduce using rule 3 (statement -> assignment .)
    WHILE           reduce using rule 3 (statement -> assignment .)
    FOR             reduce using rule 3 (statement -> assignment .)
    MINUS           reduce using rule 3 (statement -> assignment .)
    PLUS            reduce using rule 3 (statement -> assignment .)
    NUMBER          reduce using rule 3 (statement -> assignment .)
    TRUE            reduce using rule 3 (statement -> assignment .)
    FALSE           reduce using rule 3 (statement -> assignment .)
    LPRAN           reduce using rule 3 (statement -> assignment .)
    PRINT           reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)
    RBRACE          reduce using rule 3 (statement -> assignment .)


state 5

    (4) statement -> if .

    CONTINUE        reduce using rule 4 (statement -> if .)
    BREAK           reduce using rule 4 (statement -> if .)
    ID              reduce using rule 4 (statement -> if .)
    IF              reduce using rule 4 (statement -> if .)
    WHILE           reduce using rule 4 (statement -> if .)
    FOR             reduce using rule 4 (statement -> if .)
    MINUS           reduce using rule 4 (statement -> if .)
    PLUS            reduce using rule 4 (statement -> if .)
    NUMBER          reduce using rule 4 (statement -> if .)
    TRUE            reduce using rule 4 (statement -> if .)
    FALSE           reduce using rule 4 (statement -> if .)
    LPRAN           reduce using rule 4 (statement -> if .)
    PRINT           reduce using rule 4 (statement -> if .)
    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (5) statement -> while .

    CONTINUE        reduce using rule 5 (statement -> while .)
    BREAK           reduce using rule 5 (statement -> while .)
    ID              reduce using rule 5 (statement -> while .)
    IF              reduce using rule 5 (statement -> while .)
    WHILE           reduce using rule 5 (statement -> while .)
    FOR             reduce using rule 5 (statement -> while .)
    MINUS           reduce using rule 5 (statement -> while .)
    PLUS            reduce using rule 5 (statement -> while .)
    NUMBER          reduce using rule 5 (statement -> while .)
    TRUE            reduce using rule 5 (statement -> while .)
    FALSE           reduce using rule 5 (statement -> while .)
    LPRAN           reduce using rule 5 (statement -> while .)
    PRINT           reduce using rule 5 (statement -> while .)
    $end            reduce using rule 5 (statement -> while .)
    RBRACE          reduce using rule 5 (statement -> while .)


state 7

    (6) statement -> for .

    CONTINUE        reduce using rule 6 (statement -> for .)
    BREAK           reduce using rule 6 (statement -> for .)
    ID              reduce using rule 6 (statement -> for .)
    IF              reduce using rule 6 (statement -> for .)
    WHILE           reduce using rule 6 (statement -> for .)
    FOR             reduce using rule 6 (statement -> for .)
    MINUS           reduce using rule 6 (statement -> for .)
    PLUS            reduce using rule 6 (statement -> for .)
    NUMBER          reduce using rule 6 (statement -> for .)
    TRUE            reduce using rule 6 (statement -> for .)
    FALSE           reduce using rule 6 (statement -> for .)
    LPRAN           reduce using rule 6 (statement -> for .)
    PRINT           reduce using rule 6 (statement -> for .)
    $end            reduce using rule 6 (statement -> for .)
    RBRACE          reduce using rule 6 (statement -> for .)


state 8

    (7) statement -> expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 7 (statement -> expr .)
    BREAK           reduce using rule 7 (statement -> expr .)
    ID              reduce using rule 7 (statement -> expr .)
    IF              reduce using rule 7 (statement -> expr .)
    WHILE           reduce using rule 7 (statement -> expr .)
    FOR             reduce using rule 7 (statement -> expr .)
    NUMBER          reduce using rule 7 (statement -> expr .)
    TRUE            reduce using rule 7 (statement -> expr .)
    FALSE           reduce using rule 7 (statement -> expr .)
    LPRAN           reduce using rule 7 (statement -> expr .)
    PRINT           reduce using rule 7 (statement -> expr .)
    $end            reduce using rule 7 (statement -> expr .)
    RBRACE          reduce using rule 7 (statement -> expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 7 (statement -> expr .) ]
  ! PLUS            [ reduce using rule 7 (statement -> expr .) ]


state 9

    (8) statement -> print .

    CONTINUE        reduce using rule 8 (statement -> print .)
    BREAK           reduce using rule 8 (statement -> print .)
    ID              reduce using rule 8 (statement -> print .)
    IF              reduce using rule 8 (statement -> print .)
    WHILE           reduce using rule 8 (statement -> print .)
    FOR             reduce using rule 8 (statement -> print .)
    MINUS           reduce using rule 8 (statement -> print .)
    PLUS            reduce using rule 8 (statement -> print .)
    NUMBER          reduce using rule 8 (statement -> print .)
    TRUE            reduce using rule 8 (statement -> print .)
    FALSE           reduce using rule 8 (statement -> print .)
    LPRAN           reduce using rule 8 (statement -> print .)
    PRINT           reduce using rule 8 (statement -> print .)
    $end            reduce using rule 8 (statement -> print .)
    RBRACE          reduce using rule 8 (statement -> print .)


state 10

    (9) statement -> CONTINUE .

    CONTINUE        reduce using rule 9 (statement -> CONTINUE .)
    BREAK           reduce using rule 9 (statement -> CONTINUE .)
    ID              reduce using rule 9 (statement -> CONTINUE .)
    IF              reduce using rule 9 (statement -> CONTINUE .)
    WHILE           reduce using rule 9 (statement -> CONTINUE .)
    FOR             reduce using rule 9 (statement -> CONTINUE .)
    MINUS           reduce using rule 9 (statement -> CONTINUE .)
    PLUS            reduce using rule 9 (statement -> CONTINUE .)
    NUMBER          reduce using rule 9 (statement -> CONTINUE .)
    TRUE            reduce using rule 9 (statement -> CONTINUE .)
    FALSE           reduce using rule 9 (statement -> CONTINUE .)
    LPRAN           reduce using rule 9 (statement -> CONTINUE .)
    PRINT           reduce using rule 9 (statement -> CONTINUE .)
    $end            reduce using rule 9 (statement -> CONTINUE .)
    RBRACE          reduce using rule 9 (statement -> CONTINUE .)


state 11

    (10) statement -> BREAK .

    CONTINUE        reduce using rule 10 (statement -> BREAK .)
    BREAK           reduce using rule 10 (statement -> BREAK .)
    ID              reduce using rule 10 (statement -> BREAK .)
    IF              reduce using rule 10 (statement -> BREAK .)
    WHILE           reduce using rule 10 (statement -> BREAK .)
    FOR             reduce using rule 10 (statement -> BREAK .)
    MINUS           reduce using rule 10 (statement -> BREAK .)
    PLUS            reduce using rule 10 (statement -> BREAK .)
    NUMBER          reduce using rule 10 (statement -> BREAK .)
    TRUE            reduce using rule 10 (statement -> BREAK .)
    FALSE           reduce using rule 10 (statement -> BREAK .)
    LPRAN           reduce using rule 10 (statement -> BREAK .)
    PRINT           reduce using rule 10 (statement -> BREAK .)
    $end            reduce using rule 10 (statement -> BREAK .)
    RBRACE          reduce using rule 10 (statement -> BREAK .)


state 12

    (24) assignment -> ID . EQ expr
    (25) assignment -> ID . PLUS_EQUAL expr
    (26) assignment -> ID . MINUS_EQUAL expr
    (27) assignment -> ID . TIMES_EQUAL expr
    (28) assignment -> ID . DIV_EQUAL expr
    (44) expr -> ID .

    EQ              shift and go to state 36
    PLUS_EQUAL      shift and go to state 37
    MINUS_EQUAL     shift and go to state 38
    TIMES_EQUAL     shift and go to state 39
    DIV_EQUAL       shift and go to state 40
    PLUS            reduce using rule 44 (expr -> ID .)
    MINUS           reduce using rule 44 (expr -> ID .)
    TIMES           reduce using rule 44 (expr -> ID .)
    DIV             reduce using rule 44 (expr -> ID .)
    MOD             reduce using rule 44 (expr -> ID .)
    AND             reduce using rule 44 (expr -> ID .)
    OR              reduce using rule 44 (expr -> ID .)
    LT              reduce using rule 44 (expr -> ID .)
    LTE             reduce using rule 44 (expr -> ID .)
    GT              reduce using rule 44 (expr -> ID .)
    GTE             reduce using rule 44 (expr -> ID .)
    EQU             reduce using rule 44 (expr -> ID .)
    NEQU            reduce using rule 44 (expr -> ID .)
    CONTINUE        reduce using rule 44 (expr -> ID .)
    BREAK           reduce using rule 44 (expr -> ID .)
    ID              reduce using rule 44 (expr -> ID .)
    IF              reduce using rule 44 (expr -> ID .)
    WHILE           reduce using rule 44 (expr -> ID .)
    FOR             reduce using rule 44 (expr -> ID .)
    NUMBER          reduce using rule 44 (expr -> ID .)
    TRUE            reduce using rule 44 (expr -> ID .)
    FALSE           reduce using rule 44 (expr -> ID .)
    LPRAN           reduce using rule 44 (expr -> ID .)
    PRINT           reduce using rule 44 (expr -> ID .)
    $end            reduce using rule 44 (expr -> ID .)
    RBRACE          reduce using rule 44 (expr -> ID .)


state 13

    (19) if -> IF . expr COLON LBRACE statements RBRACE elif
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 41

state 14

    (18) while -> WHILE . expr COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 43

state 15

    (14) for -> FOR . ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    ID              shift and go to state 44


state 16

    (48) expr -> LPRAN . expr RPRAN
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 45

state 17

    (29) expr -> MINUS . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 46

state 18

    (30) expr -> PLUS . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 47

state 19

    (45) expr -> NUMBER .

    PLUS            reduce using rule 45 (expr -> NUMBER .)
    MINUS           reduce using rule 45 (expr -> NUMBER .)
    TIMES           reduce using rule 45 (expr -> NUMBER .)
    DIV             reduce using rule 45 (expr -> NUMBER .)
    MOD             reduce using rule 45 (expr -> NUMBER .)
    AND             reduce using rule 45 (expr -> NUMBER .)
    OR              reduce using rule 45 (expr -> NUMBER .)
    LT              reduce using rule 45 (expr -> NUMBER .)
    LTE             reduce using rule 45 (expr -> NUMBER .)
    GT              reduce using rule 45 (expr -> NUMBER .)
    GTE             reduce using rule 45 (expr -> NUMBER .)
    EQU             reduce using rule 45 (expr -> NUMBER .)
    NEQU            reduce using rule 45 (expr -> NUMBER .)
    CONTINUE        reduce using rule 45 (expr -> NUMBER .)
    BREAK           reduce using rule 45 (expr -> NUMBER .)
    ID              reduce using rule 45 (expr -> NUMBER .)
    IF              reduce using rule 45 (expr -> NUMBER .)
    WHILE           reduce using rule 45 (expr -> NUMBER .)
    FOR             reduce using rule 45 (expr -> NUMBER .)
    NUMBER          reduce using rule 45 (expr -> NUMBER .)
    TRUE            reduce using rule 45 (expr -> NUMBER .)
    FALSE           reduce using rule 45 (expr -> NUMBER .)
    LPRAN           reduce using rule 45 (expr -> NUMBER .)
    PRINT           reduce using rule 45 (expr -> NUMBER .)
    $end            reduce using rule 45 (expr -> NUMBER .)
    COLON           reduce using rule 45 (expr -> NUMBER .)
    RPRAN           reduce using rule 45 (expr -> NUMBER .)
    RBRACE          reduce using rule 45 (expr -> NUMBER .)


state 20

    (46) expr -> TRUE .

    PLUS            reduce using rule 46 (expr -> TRUE .)
    MINUS           reduce using rule 46 (expr -> TRUE .)
    TIMES           reduce using rule 46 (expr -> TRUE .)
    DIV             reduce using rule 46 (expr -> TRUE .)
    MOD             reduce using rule 46 (expr -> TRUE .)
    AND             reduce using rule 46 (expr -> TRUE .)
    OR              reduce using rule 46 (expr -> TRUE .)
    LT              reduce using rule 46 (expr -> TRUE .)
    LTE             reduce using rule 46 (expr -> TRUE .)
    GT              reduce using rule 46 (expr -> TRUE .)
    GTE             reduce using rule 46 (expr -> TRUE .)
    EQU             reduce using rule 46 (expr -> TRUE .)
    NEQU            reduce using rule 46 (expr -> TRUE .)
    CONTINUE        reduce using rule 46 (expr -> TRUE .)
    BREAK           reduce using rule 46 (expr -> TRUE .)
    ID              reduce using rule 46 (expr -> TRUE .)
    IF              reduce using rule 46 (expr -> TRUE .)
    WHILE           reduce using rule 46 (expr -> TRUE .)
    FOR             reduce using rule 46 (expr -> TRUE .)
    NUMBER          reduce using rule 46 (expr -> TRUE .)
    TRUE            reduce using rule 46 (expr -> TRUE .)
    FALSE           reduce using rule 46 (expr -> TRUE .)
    LPRAN           reduce using rule 46 (expr -> TRUE .)
    PRINT           reduce using rule 46 (expr -> TRUE .)
    $end            reduce using rule 46 (expr -> TRUE .)
    COLON           reduce using rule 46 (expr -> TRUE .)
    RPRAN           reduce using rule 46 (expr -> TRUE .)
    RBRACE          reduce using rule 46 (expr -> TRUE .)


state 21

    (47) expr -> FALSE .

    PLUS            reduce using rule 47 (expr -> FALSE .)
    MINUS           reduce using rule 47 (expr -> FALSE .)
    TIMES           reduce using rule 47 (expr -> FALSE .)
    DIV             reduce using rule 47 (expr -> FALSE .)
    MOD             reduce using rule 47 (expr -> FALSE .)
    AND             reduce using rule 47 (expr -> FALSE .)
    OR              reduce using rule 47 (expr -> FALSE .)
    LT              reduce using rule 47 (expr -> FALSE .)
    LTE             reduce using rule 47 (expr -> FALSE .)
    GT              reduce using rule 47 (expr -> FALSE .)
    GTE             reduce using rule 47 (expr -> FALSE .)
    EQU             reduce using rule 47 (expr -> FALSE .)
    NEQU            reduce using rule 47 (expr -> FALSE .)
    CONTINUE        reduce using rule 47 (expr -> FALSE .)
    BREAK           reduce using rule 47 (expr -> FALSE .)
    ID              reduce using rule 47 (expr -> FALSE .)
    IF              reduce using rule 47 (expr -> FALSE .)
    WHILE           reduce using rule 47 (expr -> FALSE .)
    FOR             reduce using rule 47 (expr -> FALSE .)
    NUMBER          reduce using rule 47 (expr -> FALSE .)
    TRUE            reduce using rule 47 (expr -> FALSE .)
    FALSE           reduce using rule 47 (expr -> FALSE .)
    LPRAN           reduce using rule 47 (expr -> FALSE .)
    PRINT           reduce using rule 47 (expr -> FALSE .)
    $end            reduce using rule 47 (expr -> FALSE .)
    COLON           reduce using rule 47 (expr -> FALSE .)
    RPRAN           reduce using rule 47 (expr -> FALSE .)
    RBRACE          reduce using rule 47 (expr -> FALSE .)


state 22

    (11) print -> PRINT . LPRAN STRING_LITERAL print_args RPRAN

    LPRAN           shift and go to state 48


state 23

    (31) expr -> expr PLUS . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 49

state 24

    (32) expr -> expr MINUS . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 50

state 25

    (33) expr -> expr TIMES . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 51

state 26

    (34) expr -> expr DIV . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 52

state 27

    (35) expr -> expr MOD . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 53

state 28

    (36) expr -> expr AND . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 54

state 29

    (37) expr -> expr OR . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 55

state 30

    (38) expr -> expr LT . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 56

state 31

    (39) expr -> expr LTE . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 57

state 32

    (40) expr -> expr GT . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 58

state 33

    (41) expr -> expr GTE . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 59

state 34

    (42) expr -> expr EQU . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 60

state 35

    (43) expr -> expr NEQU . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 61

state 36

    (24) assignment -> ID EQ . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 62

state 37

    (25) assignment -> ID PLUS_EQUAL . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 63

state 38

    (26) assignment -> ID MINUS_EQUAL . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 64

state 39

    (27) assignment -> ID TIMES_EQUAL . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 65

state 40

    (28) assignment -> ID DIV_EQUAL . expr
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 66

state 41

    (19) if -> IF expr . COLON LBRACE statements RBRACE elif
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    COLON           shift and go to state 67
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35


state 42

    (44) expr -> ID .

    COLON           reduce using rule 44 (expr -> ID .)
    PLUS            reduce using rule 44 (expr -> ID .)
    MINUS           reduce using rule 44 (expr -> ID .)
    TIMES           reduce using rule 44 (expr -> ID .)
    DIV             reduce using rule 44 (expr -> ID .)
    MOD             reduce using rule 44 (expr -> ID .)
    AND             reduce using rule 44 (expr -> ID .)
    OR              reduce using rule 44 (expr -> ID .)
    LT              reduce using rule 44 (expr -> ID .)
    LTE             reduce using rule 44 (expr -> ID .)
    GT              reduce using rule 44 (expr -> ID .)
    GTE             reduce using rule 44 (expr -> ID .)
    EQU             reduce using rule 44 (expr -> ID .)
    NEQU            reduce using rule 44 (expr -> ID .)
    RPRAN           reduce using rule 44 (expr -> ID .)
    CONTINUE        reduce using rule 44 (expr -> ID .)
    BREAK           reduce using rule 44 (expr -> ID .)
    ID              reduce using rule 44 (expr -> ID .)
    IF              reduce using rule 44 (expr -> ID .)
    WHILE           reduce using rule 44 (expr -> ID .)
    FOR             reduce using rule 44 (expr -> ID .)
    NUMBER          reduce using rule 44 (expr -> ID .)
    TRUE            reduce using rule 44 (expr -> ID .)
    FALSE           reduce using rule 44 (expr -> ID .)
    LPRAN           reduce using rule 44 (expr -> ID .)
    PRINT           reduce using rule 44 (expr -> ID .)
    $end            reduce using rule 44 (expr -> ID .)
    RBRACE          reduce using rule 44 (expr -> ID .)


state 43

    (18) while -> WHILE expr . COLON LBRACE statements RBRACE
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    COLON           shift and go to state 68
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35


state 44

    (14) for -> FOR ID . IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    IN              shift and go to state 69


state 45

    (48) expr -> LPRAN expr . RPRAN
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    RPRAN           shift and go to state 70
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35


state 46

    (29) expr -> MINUS expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 29 (expr -> MINUS expr .)
    MINUS           reduce using rule 29 (expr -> MINUS expr .)
    TIMES           reduce using rule 29 (expr -> MINUS expr .)
    DIV             reduce using rule 29 (expr -> MINUS expr .)
    MOD             reduce using rule 29 (expr -> MINUS expr .)
    AND             reduce using rule 29 (expr -> MINUS expr .)
    OR              reduce using rule 29 (expr -> MINUS expr .)
    LT              reduce using rule 29 (expr -> MINUS expr .)
    LTE             reduce using rule 29 (expr -> MINUS expr .)
    GT              reduce using rule 29 (expr -> MINUS expr .)
    GTE             reduce using rule 29 (expr -> MINUS expr .)
    EQU             reduce using rule 29 (expr -> MINUS expr .)
    NEQU            reduce using rule 29 (expr -> MINUS expr .)
    CONTINUE        reduce using rule 29 (expr -> MINUS expr .)
    BREAK           reduce using rule 29 (expr -> MINUS expr .)
    ID              reduce using rule 29 (expr -> MINUS expr .)
    IF              reduce using rule 29 (expr -> MINUS expr .)
    WHILE           reduce using rule 29 (expr -> MINUS expr .)
    FOR             reduce using rule 29 (expr -> MINUS expr .)
    NUMBER          reduce using rule 29 (expr -> MINUS expr .)
    TRUE            reduce using rule 29 (expr -> MINUS expr .)
    FALSE           reduce using rule 29 (expr -> MINUS expr .)
    LPRAN           reduce using rule 29 (expr -> MINUS expr .)
    PRINT           reduce using rule 29 (expr -> MINUS expr .)
    $end            reduce using rule 29 (expr -> MINUS expr .)
    COLON           reduce using rule 29 (expr -> MINUS expr .)
    RPRAN           reduce using rule 29 (expr -> MINUS expr .)
    RBRACE          reduce using rule 29 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 47

    (30) expr -> PLUS expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 30 (expr -> PLUS expr .)
    MINUS           reduce using rule 30 (expr -> PLUS expr .)
    TIMES           reduce using rule 30 (expr -> PLUS expr .)
    DIV             reduce using rule 30 (expr -> PLUS expr .)
    MOD             reduce using rule 30 (expr -> PLUS expr .)
    AND             reduce using rule 30 (expr -> PLUS expr .)
    OR              reduce using rule 30 (expr -> PLUS expr .)
    LT              reduce using rule 30 (expr -> PLUS expr .)
    LTE             reduce using rule 30 (expr -> PLUS expr .)
    GT              reduce using rule 30 (expr -> PLUS expr .)
    GTE             reduce using rule 30 (expr -> PLUS expr .)
    EQU             reduce using rule 30 (expr -> PLUS expr .)
    NEQU            reduce using rule 30 (expr -> PLUS expr .)
    CONTINUE        reduce using rule 30 (expr -> PLUS expr .)
    BREAK           reduce using rule 30 (expr -> PLUS expr .)
    ID              reduce using rule 30 (expr -> PLUS expr .)
    IF              reduce using rule 30 (expr -> PLUS expr .)
    WHILE           reduce using rule 30 (expr -> PLUS expr .)
    FOR             reduce using rule 30 (expr -> PLUS expr .)
    NUMBER          reduce using rule 30 (expr -> PLUS expr .)
    TRUE            reduce using rule 30 (expr -> PLUS expr .)
    FALSE           reduce using rule 30 (expr -> PLUS expr .)
    LPRAN           reduce using rule 30 (expr -> PLUS expr .)
    PRINT           reduce using rule 30 (expr -> PLUS expr .)
    $end            reduce using rule 30 (expr -> PLUS expr .)
    COLON           reduce using rule 30 (expr -> PLUS expr .)
    RPRAN           reduce using rule 30 (expr -> PLUS expr .)
    RBRACE          reduce using rule 30 (expr -> PLUS expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 48

    (11) print -> PRINT LPRAN . STRING_LITERAL print_args RPRAN

    STRING_LITERAL  shift and go to state 71


state 49

    (31) expr -> expr PLUS expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 31 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 31 (expr -> expr PLUS expr .)
    AND             reduce using rule 31 (expr -> expr PLUS expr .)
    OR              reduce using rule 31 (expr -> expr PLUS expr .)
    LT              reduce using rule 31 (expr -> expr PLUS expr .)
    LTE             reduce using rule 31 (expr -> expr PLUS expr .)
    GT              reduce using rule 31 (expr -> expr PLUS expr .)
    GTE             reduce using rule 31 (expr -> expr PLUS expr .)
    EQU             reduce using rule 31 (expr -> expr PLUS expr .)
    NEQU            reduce using rule 31 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 31 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 31 (expr -> expr PLUS expr .)
    ID              reduce using rule 31 (expr -> expr PLUS expr .)
    IF              reduce using rule 31 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 31 (expr -> expr PLUS expr .)
    FOR             reduce using rule 31 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 31 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 31 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 31 (expr -> expr PLUS expr .)
    LPRAN           reduce using rule 31 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 31 (expr -> expr PLUS expr .)
    $end            reduce using rule 31 (expr -> expr PLUS expr .)
    COLON           reduce using rule 31 (expr -> expr PLUS expr .)
    RPRAN           reduce using rule 31 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 31 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! TIMES           [ reduce using rule 31 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 31 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 50

    (32) expr -> expr MINUS expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 32 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 32 (expr -> expr MINUS expr .)
    AND             reduce using rule 32 (expr -> expr MINUS expr .)
    OR              reduce using rule 32 (expr -> expr MINUS expr .)
    LT              reduce using rule 32 (expr -> expr MINUS expr .)
    LTE             reduce using rule 32 (expr -> expr MINUS expr .)
    GT              reduce using rule 32 (expr -> expr MINUS expr .)
    GTE             reduce using rule 32 (expr -> expr MINUS expr .)
    EQU             reduce using rule 32 (expr -> expr MINUS expr .)
    NEQU            reduce using rule 32 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 32 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 32 (expr -> expr MINUS expr .)
    ID              reduce using rule 32 (expr -> expr MINUS expr .)
    IF              reduce using rule 32 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 32 (expr -> expr MINUS expr .)
    FOR             reduce using rule 32 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 32 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 32 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 32 (expr -> expr MINUS expr .)
    LPRAN           reduce using rule 32 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 32 (expr -> expr MINUS expr .)
    $end            reduce using rule 32 (expr -> expr MINUS expr .)
    COLON           reduce using rule 32 (expr -> expr MINUS expr .)
    RPRAN           reduce using rule 32 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 32 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! TIMES           [ reduce using rule 32 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 32 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 51

    (33) expr -> expr TIMES expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 33 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 33 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 33 (expr -> expr TIMES expr .)
    DIV             reduce using rule 33 (expr -> expr TIMES expr .)
    MOD             reduce using rule 33 (expr -> expr TIMES expr .)
    AND             reduce using rule 33 (expr -> expr TIMES expr .)
    OR              reduce using rule 33 (expr -> expr TIMES expr .)
    LT              reduce using rule 33 (expr -> expr TIMES expr .)
    LTE             reduce using rule 33 (expr -> expr TIMES expr .)
    GT              reduce using rule 33 (expr -> expr TIMES expr .)
    GTE             reduce using rule 33 (expr -> expr TIMES expr .)
    EQU             reduce using rule 33 (expr -> expr TIMES expr .)
    NEQU            reduce using rule 33 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 33 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 33 (expr -> expr TIMES expr .)
    ID              reduce using rule 33 (expr -> expr TIMES expr .)
    IF              reduce using rule 33 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 33 (expr -> expr TIMES expr .)
    FOR             reduce using rule 33 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 33 (expr -> expr TIMES expr .)
    TRUE            reduce using rule 33 (expr -> expr TIMES expr .)
    FALSE           reduce using rule 33 (expr -> expr TIMES expr .)
    LPRAN           reduce using rule 33 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 33 (expr -> expr TIMES expr .)
    $end            reduce using rule 33 (expr -> expr TIMES expr .)
    COLON           reduce using rule 33 (expr -> expr TIMES expr .)
    RPRAN           reduce using rule 33 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 33 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 52

    (34) expr -> expr DIV expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 34 (expr -> expr DIV expr .)
    MINUS           reduce using rule 34 (expr -> expr DIV expr .)
    TIMES           reduce using rule 34 (expr -> expr DIV expr .)
    DIV             reduce using rule 34 (expr -> expr DIV expr .)
    MOD             reduce using rule 34 (expr -> expr DIV expr .)
    AND             reduce using rule 34 (expr -> expr DIV expr .)
    OR              reduce using rule 34 (expr -> expr DIV expr .)
    LT              reduce using rule 34 (expr -> expr DIV expr .)
    LTE             reduce using rule 34 (expr -> expr DIV expr .)
    GT              reduce using rule 34 (expr -> expr DIV expr .)
    GTE             reduce using rule 34 (expr -> expr DIV expr .)
    EQU             reduce using rule 34 (expr -> expr DIV expr .)
    NEQU            reduce using rule 34 (expr -> expr DIV expr .)
    CONTINUE        reduce using rule 34 (expr -> expr DIV expr .)
    BREAK           reduce using rule 34 (expr -> expr DIV expr .)
    ID              reduce using rule 34 (expr -> expr DIV expr .)
    IF              reduce using rule 34 (expr -> expr DIV expr .)
    WHILE           reduce using rule 34 (expr -> expr DIV expr .)
    FOR             reduce using rule 34 (expr -> expr DIV expr .)
    NUMBER          reduce using rule 34 (expr -> expr DIV expr .)
    TRUE            reduce using rule 34 (expr -> expr DIV expr .)
    FALSE           reduce using rule 34 (expr -> expr DIV expr .)
    LPRAN           reduce using rule 34 (expr -> expr DIV expr .)
    PRINT           reduce using rule 34 (expr -> expr DIV expr .)
    $end            reduce using rule 34 (expr -> expr DIV expr .)
    COLON           reduce using rule 34 (expr -> expr DIV expr .)
    RPRAN           reduce using rule 34 (expr -> expr DIV expr .)
    RBRACE          reduce using rule 34 (expr -> expr DIV expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 53

    (35) expr -> expr MOD expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    PLUS            reduce using rule 35 (expr -> expr MOD expr .)
    MINUS           reduce using rule 35 (expr -> expr MOD expr .)
    TIMES           reduce using rule 35 (expr -> expr MOD expr .)
    DIV             reduce using rule 35 (expr -> expr MOD expr .)
    MOD             reduce using rule 35 (expr -> expr MOD expr .)
    AND             reduce using rule 35 (expr -> expr MOD expr .)
    OR              reduce using rule 35 (expr -> expr MOD expr .)
    LT              reduce using rule 35 (expr -> expr MOD expr .)
    LTE             reduce using rule 35 (expr -> expr MOD expr .)
    GT              reduce using rule 35 (expr -> expr MOD expr .)
    GTE             reduce using rule 35 (expr -> expr MOD expr .)
    EQU             reduce using rule 35 (expr -> expr MOD expr .)
    NEQU            reduce using rule 35 (expr -> expr MOD expr .)
    CONTINUE        reduce using rule 35 (expr -> expr MOD expr .)
    BREAK           reduce using rule 35 (expr -> expr MOD expr .)
    ID              reduce using rule 35 (expr -> expr MOD expr .)
    IF              reduce using rule 35 (expr -> expr MOD expr .)
    WHILE           reduce using rule 35 (expr -> expr MOD expr .)
    FOR             reduce using rule 35 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 35 (expr -> expr MOD expr .)
    TRUE            reduce using rule 35 (expr -> expr MOD expr .)
    FALSE           reduce using rule 35 (expr -> expr MOD expr .)
    LPRAN           reduce using rule 35 (expr -> expr MOD expr .)
    PRINT           reduce using rule 35 (expr -> expr MOD expr .)
    $end            reduce using rule 35 (expr -> expr MOD expr .)
    COLON           reduce using rule 35 (expr -> expr MOD expr .)
    RPRAN           reduce using rule 35 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 35 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIV             [ shift and go to state 26 ]
  ! MOD             [ shift and go to state 27 ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 54

    (36) expr -> expr AND expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 36 (expr -> expr AND expr .)
    OR              reduce using rule 36 (expr -> expr AND expr .)
    LT              reduce using rule 36 (expr -> expr AND expr .)
    LTE             reduce using rule 36 (expr -> expr AND expr .)
    GT              reduce using rule 36 (expr -> expr AND expr .)
    GTE             reduce using rule 36 (expr -> expr AND expr .)
    EQU             reduce using rule 36 (expr -> expr AND expr .)
    NEQU            reduce using rule 36 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 36 (expr -> expr AND expr .)
    BREAK           reduce using rule 36 (expr -> expr AND expr .)
    ID              reduce using rule 36 (expr -> expr AND expr .)
    IF              reduce using rule 36 (expr -> expr AND expr .)
    WHILE           reduce using rule 36 (expr -> expr AND expr .)
    FOR             reduce using rule 36 (expr -> expr AND expr .)
    NUMBER          reduce using rule 36 (expr -> expr AND expr .)
    TRUE            reduce using rule 36 (expr -> expr AND expr .)
    FALSE           reduce using rule 36 (expr -> expr AND expr .)
    LPRAN           reduce using rule 36 (expr -> expr AND expr .)
    PRINT           reduce using rule 36 (expr -> expr AND expr .)
    $end            reduce using rule 36 (expr -> expr AND expr .)
    COLON           reduce using rule 36 (expr -> expr AND expr .)
    RPRAN           reduce using rule 36 (expr -> expr AND expr .)
    RBRACE          reduce using rule 36 (expr -> expr AND expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 55

    (37) expr -> expr OR expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 37 (expr -> expr OR expr .)
    OR              reduce using rule 37 (expr -> expr OR expr .)
    LT              reduce using rule 37 (expr -> expr OR expr .)
    LTE             reduce using rule 37 (expr -> expr OR expr .)
    GT              reduce using rule 37 (expr -> expr OR expr .)
    GTE             reduce using rule 37 (expr -> expr OR expr .)
    EQU             reduce using rule 37 (expr -> expr OR expr .)
    NEQU            reduce using rule 37 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 37 (expr -> expr OR expr .)
    BREAK           reduce using rule 37 (expr -> expr OR expr .)
    ID              reduce using rule 37 (expr -> expr OR expr .)
    IF              reduce using rule 37 (expr -> expr OR expr .)
    WHILE           reduce using rule 37 (expr -> expr OR expr .)
    FOR             reduce using rule 37 (expr -> expr OR expr .)
    NUMBER          reduce using rule 37 (expr -> expr OR expr .)
    TRUE            reduce using rule 37 (expr -> expr OR expr .)
    FALSE           reduce using rule 37 (expr -> expr OR expr .)
    LPRAN           reduce using rule 37 (expr -> expr OR expr .)
    PRINT           reduce using rule 37 (expr -> expr OR expr .)
    $end            reduce using rule 37 (expr -> expr OR expr .)
    COLON           reduce using rule 37 (expr -> expr OR expr .)
    RPRAN           reduce using rule 37 (expr -> expr OR expr .)
    RBRACE          reduce using rule 37 (expr -> expr OR expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 37 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 37 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 56

    (38) expr -> expr LT expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 38 (expr -> expr LT expr .)
    OR              reduce using rule 38 (expr -> expr LT expr .)
    LT              reduce using rule 38 (expr -> expr LT expr .)
    LTE             reduce using rule 38 (expr -> expr LT expr .)
    GT              reduce using rule 38 (expr -> expr LT expr .)
    GTE             reduce using rule 38 (expr -> expr LT expr .)
    EQU             reduce using rule 38 (expr -> expr LT expr .)
    NEQU            reduce using rule 38 (expr -> expr LT expr .)
    CONTINUE        reduce using rule 38 (expr -> expr LT expr .)
    BREAK           reduce using rule 38 (expr -> expr LT expr .)
    ID              reduce using rule 38 (expr -> expr LT expr .)
    IF              reduce using rule 38 (expr -> expr LT expr .)
    WHILE           reduce using rule 38 (expr -> expr LT expr .)
    FOR             reduce using rule 38 (expr -> expr LT expr .)
    NUMBER          reduce using rule 38 (expr -> expr LT expr .)
    TRUE            reduce using rule 38 (expr -> expr LT expr .)
    FALSE           reduce using rule 38 (expr -> expr LT expr .)
    LPRAN           reduce using rule 38 (expr -> expr LT expr .)
    PRINT           reduce using rule 38 (expr -> expr LT expr .)
    $end            reduce using rule 38 (expr -> expr LT expr .)
    COLON           reduce using rule 38 (expr -> expr LT expr .)
    RPRAN           reduce using rule 38 (expr -> expr LT expr .)
    RBRACE          reduce using rule 38 (expr -> expr LT expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 38 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr LT expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 57

    (39) expr -> expr LTE expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 39 (expr -> expr LTE expr .)
    OR              reduce using rule 39 (expr -> expr LTE expr .)
    LT              reduce using rule 39 (expr -> expr LTE expr .)
    LTE             reduce using rule 39 (expr -> expr LTE expr .)
    GT              reduce using rule 39 (expr -> expr LTE expr .)
    GTE             reduce using rule 39 (expr -> expr LTE expr .)
    EQU             reduce using rule 39 (expr -> expr LTE expr .)
    NEQU            reduce using rule 39 (expr -> expr LTE expr .)
    CONTINUE        reduce using rule 39 (expr -> expr LTE expr .)
    BREAK           reduce using rule 39 (expr -> expr LTE expr .)
    ID              reduce using rule 39 (expr -> expr LTE expr .)
    IF              reduce using rule 39 (expr -> expr LTE expr .)
    WHILE           reduce using rule 39 (expr -> expr LTE expr .)
    FOR             reduce using rule 39 (expr -> expr LTE expr .)
    NUMBER          reduce using rule 39 (expr -> expr LTE expr .)
    TRUE            reduce using rule 39 (expr -> expr LTE expr .)
    FALSE           reduce using rule 39 (expr -> expr LTE expr .)
    LPRAN           reduce using rule 39 (expr -> expr LTE expr .)
    PRINT           reduce using rule 39 (expr -> expr LTE expr .)
    $end            reduce using rule 39 (expr -> expr LTE expr .)
    COLON           reduce using rule 39 (expr -> expr LTE expr .)
    RPRAN           reduce using rule 39 (expr -> expr LTE expr .)
    RBRACE          reduce using rule 39 (expr -> expr LTE expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 39 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr LTE expr .) ]
  ! DIV             [ reduce using rule 39 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr LTE expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 58

    (40) expr -> expr GT expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 40 (expr -> expr GT expr .)
    OR              reduce using rule 40 (expr -> expr GT expr .)
    LT              reduce using rule 40 (expr -> expr GT expr .)
    LTE             reduce using rule 40 (expr -> expr GT expr .)
    GT              reduce using rule 40 (expr -> expr GT expr .)
    GTE             reduce using rule 40 (expr -> expr GT expr .)
    EQU             reduce using rule 40 (expr -> expr GT expr .)
    NEQU            reduce using rule 40 (expr -> expr GT expr .)
    CONTINUE        reduce using rule 40 (expr -> expr GT expr .)
    BREAK           reduce using rule 40 (expr -> expr GT expr .)
    ID              reduce using rule 40 (expr -> expr GT expr .)
    IF              reduce using rule 40 (expr -> expr GT expr .)
    WHILE           reduce using rule 40 (expr -> expr GT expr .)
    FOR             reduce using rule 40 (expr -> expr GT expr .)
    NUMBER          reduce using rule 40 (expr -> expr GT expr .)
    TRUE            reduce using rule 40 (expr -> expr GT expr .)
    FALSE           reduce using rule 40 (expr -> expr GT expr .)
    LPRAN           reduce using rule 40 (expr -> expr GT expr .)
    PRINT           reduce using rule 40 (expr -> expr GT expr .)
    $end            reduce using rule 40 (expr -> expr GT expr .)
    COLON           reduce using rule 40 (expr -> expr GT expr .)
    RPRAN           reduce using rule 40 (expr -> expr GT expr .)
    RBRACE          reduce using rule 40 (expr -> expr GT expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 40 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 40 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr GT expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 59

    (41) expr -> expr GTE expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 41 (expr -> expr GTE expr .)
    OR              reduce using rule 41 (expr -> expr GTE expr .)
    LT              reduce using rule 41 (expr -> expr GTE expr .)
    LTE             reduce using rule 41 (expr -> expr GTE expr .)
    GT              reduce using rule 41 (expr -> expr GTE expr .)
    GTE             reduce using rule 41 (expr -> expr GTE expr .)
    EQU             reduce using rule 41 (expr -> expr GTE expr .)
    NEQU            reduce using rule 41 (expr -> expr GTE expr .)
    CONTINUE        reduce using rule 41 (expr -> expr GTE expr .)
    BREAK           reduce using rule 41 (expr -> expr GTE expr .)
    ID              reduce using rule 41 (expr -> expr GTE expr .)
    IF              reduce using rule 41 (expr -> expr GTE expr .)
    WHILE           reduce using rule 41 (expr -> expr GTE expr .)
    FOR             reduce using rule 41 (expr -> expr GTE expr .)
    NUMBER          reduce using rule 41 (expr -> expr GTE expr .)
    TRUE            reduce using rule 41 (expr -> expr GTE expr .)
    FALSE           reduce using rule 41 (expr -> expr GTE expr .)
    LPRAN           reduce using rule 41 (expr -> expr GTE expr .)
    PRINT           reduce using rule 41 (expr -> expr GTE expr .)
    $end            reduce using rule 41 (expr -> expr GTE expr .)
    COLON           reduce using rule 41 (expr -> expr GTE expr .)
    RPRAN           reduce using rule 41 (expr -> expr GTE expr .)
    RBRACE          reduce using rule 41 (expr -> expr GTE expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 41 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr GTE expr .) ]
  ! DIV             [ reduce using rule 41 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr GTE expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 60

    (42) expr -> expr EQU expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 42 (expr -> expr EQU expr .)
    OR              reduce using rule 42 (expr -> expr EQU expr .)
    LT              reduce using rule 42 (expr -> expr EQU expr .)
    LTE             reduce using rule 42 (expr -> expr EQU expr .)
    GT              reduce using rule 42 (expr -> expr EQU expr .)
    GTE             reduce using rule 42 (expr -> expr EQU expr .)
    EQU             reduce using rule 42 (expr -> expr EQU expr .)
    NEQU            reduce using rule 42 (expr -> expr EQU expr .)
    CONTINUE        reduce using rule 42 (expr -> expr EQU expr .)
    BREAK           reduce using rule 42 (expr -> expr EQU expr .)
    ID              reduce using rule 42 (expr -> expr EQU expr .)
    IF              reduce using rule 42 (expr -> expr EQU expr .)
    WHILE           reduce using rule 42 (expr -> expr EQU expr .)
    FOR             reduce using rule 42 (expr -> expr EQU expr .)
    NUMBER          reduce using rule 42 (expr -> expr EQU expr .)
    TRUE            reduce using rule 42 (expr -> expr EQU expr .)
    FALSE           reduce using rule 42 (expr -> expr EQU expr .)
    LPRAN           reduce using rule 42 (expr -> expr EQU expr .)
    PRINT           reduce using rule 42 (expr -> expr EQU expr .)
    $end            reduce using rule 42 (expr -> expr EQU expr .)
    COLON           reduce using rule 42 (expr -> expr EQU expr .)
    RPRAN           reduce using rule 42 (expr -> expr EQU expr .)
    RBRACE          reduce using rule 42 (expr -> expr EQU expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 42 (expr -> expr EQU expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr EQU expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr EQU expr .) ]
  ! DIV             [ reduce using rule 42 (expr -> expr EQU expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr EQU expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 61

    (43) expr -> expr NEQU expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    AND             reduce using rule 43 (expr -> expr NEQU expr .)
    OR              reduce using rule 43 (expr -> expr NEQU expr .)
    LT              reduce using rule 43 (expr -> expr NEQU expr .)
    LTE             reduce using rule 43 (expr -> expr NEQU expr .)
    GT              reduce using rule 43 (expr -> expr NEQU expr .)
    GTE             reduce using rule 43 (expr -> expr NEQU expr .)
    EQU             reduce using rule 43 (expr -> expr NEQU expr .)
    NEQU            reduce using rule 43 (expr -> expr NEQU expr .)
    CONTINUE        reduce using rule 43 (expr -> expr NEQU expr .)
    BREAK           reduce using rule 43 (expr -> expr NEQU expr .)
    ID              reduce using rule 43 (expr -> expr NEQU expr .)
    IF              reduce using rule 43 (expr -> expr NEQU expr .)
    WHILE           reduce using rule 43 (expr -> expr NEQU expr .)
    FOR             reduce using rule 43 (expr -> expr NEQU expr .)
    NUMBER          reduce using rule 43 (expr -> expr NEQU expr .)
    TRUE            reduce using rule 43 (expr -> expr NEQU expr .)
    FALSE           reduce using rule 43 (expr -> expr NEQU expr .)
    LPRAN           reduce using rule 43 (expr -> expr NEQU expr .)
    PRINT           reduce using rule 43 (expr -> expr NEQU expr .)
    $end            reduce using rule 43 (expr -> expr NEQU expr .)
    COLON           reduce using rule 43 (expr -> expr NEQU expr .)
    RPRAN           reduce using rule 43 (expr -> expr NEQU expr .)
    RBRACE          reduce using rule 43 (expr -> expr NEQU expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27

  ! PLUS            [ reduce using rule 43 (expr -> expr NEQU expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr NEQU expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr NEQU expr .) ]
  ! DIV             [ reduce using rule 43 (expr -> expr NEQU expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr NEQU expr .) ]
  ! AND             [ shift and go to state 28 ]
  ! OR              [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! GT              [ shift and go to state 32 ]
  ! GTE             [ shift and go to state 33 ]
  ! EQU             [ shift and go to state 34 ]
  ! NEQU            [ shift and go to state 35 ]


state 62

    (24) assignment -> ID EQ expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 24 (assignment -> ID EQ expr .)
    BREAK           reduce using rule 24 (assignment -> ID EQ expr .)
    ID              reduce using rule 24 (assignment -> ID EQ expr .)
    IF              reduce using rule 24 (assignment -> ID EQ expr .)
    WHILE           reduce using rule 24 (assignment -> ID EQ expr .)
    FOR             reduce using rule 24 (assignment -> ID EQ expr .)
    NUMBER          reduce using rule 24 (assignment -> ID EQ expr .)
    TRUE            reduce using rule 24 (assignment -> ID EQ expr .)
    FALSE           reduce using rule 24 (assignment -> ID EQ expr .)
    LPRAN           reduce using rule 24 (assignment -> ID EQ expr .)
    PRINT           reduce using rule 24 (assignment -> ID EQ expr .)
    $end            reduce using rule 24 (assignment -> ID EQ expr .)
    RBRACE          reduce using rule 24 (assignment -> ID EQ expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 24 (assignment -> ID EQ expr .) ]
  ! PLUS            [ reduce using rule 24 (assignment -> ID EQ expr .) ]


state 63

    (25) assignment -> ID PLUS_EQUAL expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    BREAK           reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    ID              reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    IF              reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    WHILE           reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    FOR             reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    NUMBER          reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    TRUE            reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    FALSE           reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    LPRAN           reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    PRINT           reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    $end            reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    RBRACE          reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 25 (assignment -> ID PLUS_EQUAL expr .) ]


state 64

    (26) assignment -> ID MINUS_EQUAL expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    BREAK           reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    ID              reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    IF              reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    WHILE           reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    FOR             reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    NUMBER          reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    TRUE            reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    FALSE           reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    LPRAN           reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    PRINT           reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    $end            reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    RBRACE          reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 26 (assignment -> ID MINUS_EQUAL expr .) ]


state 65

    (27) assignment -> ID TIMES_EQUAL expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    BREAK           reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    ID              reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    IF              reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    WHILE           reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    FOR             reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    NUMBER          reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    TRUE            reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    FALSE           reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    LPRAN           reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    PRINT           reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    $end            reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    RBRACE          reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 27 (assignment -> ID TIMES_EQUAL expr .) ]


state 66

    (28) assignment -> ID DIV_EQUAL expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    CONTINUE        reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    BREAK           reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    ID              reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    IF              reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    WHILE           reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    FOR             reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    NUMBER          reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    TRUE            reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    FALSE           reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    LPRAN           reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    PRINT           reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    $end            reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    RBRACE          reduce using rule 28 (assignment -> ID DIV_EQUAL expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35

  ! MINUS           [ reduce using rule 28 (assignment -> ID DIV_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 28 (assignment -> ID DIV_EQUAL expr .) ]


state 67

    (19) if -> IF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 72


state 68

    (18) while -> WHILE expr COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 73


state 69

    (14) for -> FOR ID IN . RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE

    RANGE           shift and go to state 74


state 70

    (48) expr -> LPRAN expr RPRAN .

    PLUS            reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    MINUS           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    TIMES           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    DIV             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    MOD             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    AND             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    OR              reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    LT              reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    LTE             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    GT              reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    GTE             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    EQU             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    NEQU            reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    CONTINUE        reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    BREAK           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    ID              reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    IF              reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    WHILE           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    FOR             reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    NUMBER          reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    TRUE            reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    FALSE           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    LPRAN           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    PRINT           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    $end            reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    COLON           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    RPRAN           reduce using rule 48 (expr -> LPRAN expr RPRAN .)
    RBRACE          reduce using rule 48 (expr -> LPRAN expr RPRAN .)


state 71

    (11) print -> PRINT LPRAN STRING_LITERAL . print_args RPRAN
    (12) print_args -> . expr
    (13) print_args -> . empty
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (51) empty -> .

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    RPRAN           reduce using rule 51 (empty -> .)

    print_args                     shift and go to state 75
    expr                           shift and go to state 76
    empty                          shift and go to state 77

state 72

    (19) if -> IF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)

    statements                     shift and go to state 78
    empty                          shift and go to state 2

state 73

    (18) while -> WHILE expr COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)

    statements                     shift and go to state 79
    empty                          shift and go to state 2

state 74

    (14) for -> FOR ID IN RANGE . LPRAN params RPRAN COLON LBRACE statements RBRACE

    LPRAN           shift and go to state 80


state 75

    (11) print -> PRINT LPRAN STRING_LITERAL print_args . RPRAN

    RPRAN           shift and go to state 81


state 76

    (12) print_args -> expr .
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    RPRAN           reduce using rule 12 (print_args -> expr .)
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35


state 77

    (13) print_args -> empty .

    RPRAN           reduce using rule 13 (print_args -> empty .)


state 78

    (19) if -> IF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    RBRACE          shift and go to state 82
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    print                          shift and go to state 9

state 79

    (18) while -> WHILE expr COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    RBRACE          shift and go to state 83
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    print                          shift and go to state 9

state 80

    (14) for -> FOR ID IN RANGE LPRAN . params RPRAN COLON LBRACE statements RBRACE
    (15) params -> . num_or_id
    (16) params -> . num_or_id SEP num_or_id
    (17) params -> . num_or_id SEP num_or_id SEP num_or_id
    (49) num_or_id -> . NUMBER
    (50) num_or_id -> . ID

    NUMBER          shift and go to state 87
    ID              shift and go to state 84

    params                         shift and go to state 85
    num_or_id                      shift and go to state 86

state 81

    (11) print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .

    CONTINUE        reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    BREAK           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    ID              reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    IF              reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    WHILE           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    FOR             reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    MINUS           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    PLUS            reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    NUMBER          reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    TRUE            reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    FALSE           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    LPRAN           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    PRINT           reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    $end            reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)
    RBRACE          reduce using rule 11 (print -> PRINT LPRAN STRING_LITERAL print_args RPRAN .)


state 82

    (19) if -> IF expr COLON LBRACE statements RBRACE . elif
    (20) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (21) elif -> . else
    (22) else -> . ELSE COLON LBRACE statements RBRACE
    (23) else -> . empty
    (51) empty -> .

    ELIF            shift and go to state 89
    ELSE            shift and go to state 91
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    RBRACE          reduce using rule 51 (empty -> .)

    elif                           shift and go to state 88
    else                           shift and go to state 90
    empty                          shift and go to state 92

state 83

    (18) while -> WHILE expr COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    ID              reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    IF              reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    PRINT           reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    $end            reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (while -> WHILE expr COLON LBRACE statements RBRACE .)


state 84

    (50) num_or_id -> ID .

    SEP             reduce using rule 50 (num_or_id -> ID .)
    RPRAN           reduce using rule 50 (num_or_id -> ID .)


state 85

    (14) for -> FOR ID IN RANGE LPRAN params . RPRAN COLON LBRACE statements RBRACE

    RPRAN           shift and go to state 93


state 86

    (15) params -> num_or_id .
    (16) params -> num_or_id . SEP num_or_id
    (17) params -> num_or_id . SEP num_or_id SEP num_or_id

    RPRAN           reduce using rule 15 (params -> num_or_id .)
    SEP             shift and go to state 94


state 87

    (49) num_or_id -> NUMBER .

    SEP             reduce using rule 49 (num_or_id -> NUMBER .)
    RPRAN           reduce using rule 49 (num_or_id -> NUMBER .)


state 88

    (19) if -> IF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    MINUS           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    PLUS            reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    PRINT           reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 19 (if -> IF expr COLON LBRACE statements RBRACE elif .)


state 89

    (20) elif -> ELIF . expr COLON LBRACE statements RBRACE elif
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN

    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    ID              shift and go to state 42
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16

    expr                           shift and go to state 95

state 90

    (21) elif -> else .

    CONTINUE        reduce using rule 21 (elif -> else .)
    BREAK           reduce using rule 21 (elif -> else .)
    ID              reduce using rule 21 (elif -> else .)
    IF              reduce using rule 21 (elif -> else .)
    WHILE           reduce using rule 21 (elif -> else .)
    FOR             reduce using rule 21 (elif -> else .)
    MINUS           reduce using rule 21 (elif -> else .)
    PLUS            reduce using rule 21 (elif -> else .)
    NUMBER          reduce using rule 21 (elif -> else .)
    TRUE            reduce using rule 21 (elif -> else .)
    FALSE           reduce using rule 21 (elif -> else .)
    LPRAN           reduce using rule 21 (elif -> else .)
    PRINT           reduce using rule 21 (elif -> else .)
    $end            reduce using rule 21 (elif -> else .)
    RBRACE          reduce using rule 21 (elif -> else .)


state 91

    (22) else -> ELSE . COLON LBRACE statements RBRACE

    COLON           shift and go to state 96


state 92

    (23) else -> empty .

    CONTINUE        reduce using rule 23 (else -> empty .)
    BREAK           reduce using rule 23 (else -> empty .)
    ID              reduce using rule 23 (else -> empty .)
    IF              reduce using rule 23 (else -> empty .)
    WHILE           reduce using rule 23 (else -> empty .)
    FOR             reduce using rule 23 (else -> empty .)
    MINUS           reduce using rule 23 (else -> empty .)
    PLUS            reduce using rule 23 (else -> empty .)
    NUMBER          reduce using rule 23 (else -> empty .)
    TRUE            reduce using rule 23 (else -> empty .)
    FALSE           reduce using rule 23 (else -> empty .)
    LPRAN           reduce using rule 23 (else -> empty .)
    PRINT           reduce using rule 23 (else -> empty .)
    $end            reduce using rule 23 (else -> empty .)
    RBRACE          reduce using rule 23 (else -> empty .)


state 93

    (14) for -> FOR ID IN RANGE LPRAN params RPRAN . COLON LBRACE statements RBRACE

    COLON           shift and go to state 97


state 94

    (16) params -> num_or_id SEP . num_or_id
    (17) params -> num_or_id SEP . num_or_id SEP num_or_id
    (49) num_or_id -> . NUMBER
    (50) num_or_id -> . ID

    NUMBER          shift and go to state 87
    ID              shift and go to state 84

    num_or_id                      shift and go to state 98

state 95

    (20) elif -> ELIF expr . COLON LBRACE statements RBRACE elif
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . MINUS expr
    (33) expr -> expr . TIMES expr
    (34) expr -> expr . DIV expr
    (35) expr -> expr . MOD expr
    (36) expr -> expr . AND expr
    (37) expr -> expr . OR expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . LTE expr
    (40) expr -> expr . GT expr
    (41) expr -> expr . GTE expr
    (42) expr -> expr . EQU expr
    (43) expr -> expr . NEQU expr

    COLON           shift and go to state 99
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    TIMES           shift and go to state 25
    DIV             shift and go to state 26
    MOD             shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    GT              shift and go to state 32
    GTE             shift and go to state 33
    EQU             shift and go to state 34
    NEQU            shift and go to state 35


state 96

    (22) else -> ELSE COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 100


state 97

    (14) for -> FOR ID IN RANGE LPRAN params RPRAN COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 101


state 98

    (16) params -> num_or_id SEP num_or_id .
    (17) params -> num_or_id SEP num_or_id . SEP num_or_id

    RPRAN           reduce using rule 16 (params -> num_or_id SEP num_or_id .)
    SEP             shift and go to state 102


state 99

    (20) elif -> ELIF expr COLON . LBRACE statements RBRACE elif

    LBRACE          shift and go to state 103


state 100

    (22) else -> ELSE COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)

    statements                     shift and go to state 104
    empty                          shift and go to state 2

state 101

    (14) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)

    statements                     shift and go to state 105
    empty                          shift and go to state 2

state 102

    (17) params -> num_or_id SEP num_or_id SEP . num_or_id
    (49) num_or_id -> . NUMBER
    (50) num_or_id -> . ID

    NUMBER          shift and go to state 87
    ID              shift and go to state 84

    num_or_id                      shift and go to state 106

state 103

    (20) elif -> ELIF expr COLON LBRACE . statements RBRACE elif
    (1) statements -> . statements statement
    (2) statements -> . empty
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)

    statements                     shift and go to state 107
    empty                          shift and go to state 2

state 104

    (22) else -> ELSE COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    RBRACE          shift and go to state 108
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    print                          shift and go to state 9

state 105

    (14) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    RBRACE          shift and go to state 109
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    expr                           shift and go to state 8
    print                          shift and go to state 9

state 106

    (17) params -> num_or_id SEP num_or_id SEP num_or_id .

    RPRAN           reduce using rule 17 (params -> num_or_id SEP num_or_id SEP num_or_id .)


state 107

    (20) elif -> ELIF expr COLON LBRACE statements . RBRACE elif
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . while
    (6) statement -> . for
    (7) statement -> . expr
    (8) statement -> . print
    (9) statement -> . CONTINUE
    (10) statement -> . BREAK
    (24) assignment -> . ID EQ expr
    (25) assignment -> . ID PLUS_EQUAL expr
    (26) assignment -> . ID MINUS_EQUAL expr
    (27) assignment -> . ID TIMES_EQUAL expr
    (28) assignment -> . ID DIV_EQUAL expr
    (19) if -> . IF expr COLON LBRACE statements RBRACE elif
    (18) while -> . WHILE expr COLON LBRACE statements RBRACE
    (14) for -> . FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE
    (29) expr -> . MINUS expr
    (30) expr -> . PLUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr MINUS expr
    (33) expr -> . expr TIMES expr
    (34) expr -> . expr DIV expr
    (35) expr -> . expr MOD expr
    (36) expr -> . expr AND expr
    (37) expr -> . expr OR expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr LTE expr
    (40) expr -> . expr GT expr
    (41) expr -> . expr GTE expr
    (42) expr -> . expr EQU expr
    (43) expr -> . expr NEQU expr
    (44) expr -> . ID
    (45) expr -> . NUMBER
    (46) expr -> . TRUE
    (47) expr -> . FALSE
    (48) expr -> . LPRAN expr RPRAN
    (11) print -> . PRINT LPRAN STRING_LITERAL print_args RPRAN

    RBRACE          shift and go to state 110
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    ID              shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 15
    MINUS           shift and go to state 17
    PLUS            shift and go to state 18
    NUMBER          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    LPRAN           shift and go to state 16
    PRINT           shift and go to state 22

    expr                           shift and go to state 8
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    while                          shift and go to state 6
    for                            shift and go to state 7
    print                          shift and go to state 9

state 108

    (22) else -> ELSE COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    ID              reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    IF              reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    PRINT           reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    $end            reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 22 (else -> ELSE COLON LBRACE statements RBRACE .)


state 109

    (14) for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .

    CONTINUE        reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    BREAK           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    ID              reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    IF              reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    WHILE           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FOR             reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    MINUS           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    PLUS            reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    TRUE            reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    FALSE           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    PRINT           reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    $end            reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 14 (for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE .)


state 110

    (20) elif -> ELIF expr COLON LBRACE statements RBRACE . elif
    (20) elif -> . ELIF expr COLON LBRACE statements RBRACE elif
    (21) elif -> . else
    (22) else -> . ELSE COLON LBRACE statements RBRACE
    (23) else -> . empty
    (51) empty -> .

    ELIF            shift and go to state 89
    ELSE            shift and go to state 91
    CONTINUE        reduce using rule 51 (empty -> .)
    BREAK           reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    FOR             reduce using rule 51 (empty -> .)
    MINUS           reduce using rule 51 (empty -> .)
    PLUS            reduce using rule 51 (empty -> .)
    NUMBER          reduce using rule 51 (empty -> .)
    TRUE            reduce using rule 51 (empty -> .)
    FALSE           reduce using rule 51 (empty -> .)
    LPRAN           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    RBRACE          reduce using rule 51 (empty -> .)

    elif                           shift and go to state 111
    else                           shift and go to state 90
    empty                          shift and go to state 92

state 111

    (20) elif -> ELIF expr COLON LBRACE statements RBRACE elif .

    CONTINUE        reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    BREAK           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    ID              reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    IF              reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    WHILE           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FOR             reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    MINUS           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    PLUS            reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    NUMBER          reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    TRUE            reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    FALSE           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    LPRAN           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    PRINT           reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    $end            reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)
    RBRACE          reduce using rule 20 (elif -> ELIF expr COLON LBRACE statements RBRACE elif .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
