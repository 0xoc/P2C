Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COLON
    COMMENTS
    CONTINUE
    ELSE
    FALSE
    FOR
    IF
    IN
    LBRACE
    NOT
    RANGE
    RBRACE
    SEP
    TRUE
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> empty
Rule 3     statement -> assignment
Rule 4     statement -> expr
Rule 5     assignment -> ID EQ expr
Rule 6     expr -> expr operator expr
Rule 7     expr -> expr relop expr
Rule 8     expr -> expr logic expr
Rule 9     expr -> ID
Rule 10    expr -> NUMBER
Rule 11    operator -> TIMES
Rule 12    operator -> DIV
Rule 13    operator -> PLUS
Rule 14    operator -> MINUS
Rule 15    operator -> MOD
Rule 16    logic -> AND
Rule 17    logic -> OR
Rule 18    relop -> LT
Rule 19    relop -> LTE
Rule 20    relop -> GT
Rule 21    relop -> GTE
Rule 22    relop -> EQU
Rule 23    relop -> NEQU
Rule 24    expr -> LPRAN expr RPRAN
Rule 25    empty -> <empty>

Terminals, with rules where they appear

AND                  : 16
BREAK                : 
COLON                : 
COMMENTS             : 
CONTINUE             : 
DIV                  : 12
ELSE                 : 
EQ                   : 5
EQU                  : 22
FALSE                : 
FOR                  : 
GT                   : 20
GTE                  : 21
ID                   : 5 9
IF                   : 
IN                   : 
LBRACE               : 
LPRAN                : 24
LT                   : 18
LTE                  : 19
MINUS                : 14
MOD                  : 15
NEQU                 : 23
NOT                  : 
NUMBER               : 10
OR                   : 17
PLUS                 : 13
RANGE                : 
RBRACE               : 
RPRAN                : 24
SEP                  : 
TIMES                : 11
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 3
empty                : 2
expr                 : 4 5 6 6 7 7 8 8 24
logic                : 8
operator             : 6
program              : 1 0
relop                : 7
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . empty
    (25) empty -> .

    ID              reduce using rule 25 (empty -> .)
    NUMBER          reduce using rule 25 (empty -> .)
    LPRAN           reduce using rule 25 (empty -> .)
    $end            reduce using rule 25 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (1) program -> program . statement
    (3) statement -> . assignment
    (4) statement -> . expr
    (5) assignment -> . ID EQ expr
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 6
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    expr                           shift and go to state 5

state 2

    (2) program -> empty .

    ID              reduce using rule 2 (program -> empty .)
    NUMBER          reduce using rule 2 (program -> empty .)
    LPRAN           reduce using rule 2 (program -> empty .)
    $end            reduce using rule 2 (program -> empty .)


state 3

    (1) program -> program statement .

    ID              reduce using rule 1 (program -> program statement .)
    NUMBER          reduce using rule 1 (program -> program statement .)
    LPRAN           reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 4

    (3) statement -> assignment .

    ID              reduce using rule 3 (statement -> assignment .)
    NUMBER          reduce using rule 3 (statement -> assignment .)
    LPRAN           reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)


state 5

    (4) statement -> expr .
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

    ID              reduce using rule 4 (statement -> expr .)
    NUMBER          reduce using rule 4 (statement -> expr .)
    LPRAN           reduce using rule 4 (statement -> expr .)
    $end            reduce using rule 4 (statement -> expr .)
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

    operator                       shift and go to state 9
    relop                          shift and go to state 10
    logic                          shift and go to state 11

state 6

    (5) assignment -> ID . EQ expr
    (9) expr -> ID .

    EQ              shift and go to state 25
    TIMES           reduce using rule 9 (expr -> ID .)
    DIV             reduce using rule 9 (expr -> ID .)
    PLUS            reduce using rule 9 (expr -> ID .)
    MINUS           reduce using rule 9 (expr -> ID .)
    MOD             reduce using rule 9 (expr -> ID .)
    LT              reduce using rule 9 (expr -> ID .)
    LTE             reduce using rule 9 (expr -> ID .)
    GT              reduce using rule 9 (expr -> ID .)
    GTE             reduce using rule 9 (expr -> ID .)
    EQU             reduce using rule 9 (expr -> ID .)
    NEQU            reduce using rule 9 (expr -> ID .)
    AND             reduce using rule 9 (expr -> ID .)
    OR              reduce using rule 9 (expr -> ID .)
    ID              reduce using rule 9 (expr -> ID .)
    NUMBER          reduce using rule 9 (expr -> ID .)
    LPRAN           reduce using rule 9 (expr -> ID .)
    $end            reduce using rule 9 (expr -> ID .)


state 7

    (10) expr -> NUMBER .

    TIMES           reduce using rule 10 (expr -> NUMBER .)
    DIV             reduce using rule 10 (expr -> NUMBER .)
    PLUS            reduce using rule 10 (expr -> NUMBER .)
    MINUS           reduce using rule 10 (expr -> NUMBER .)
    MOD             reduce using rule 10 (expr -> NUMBER .)
    LT              reduce using rule 10 (expr -> NUMBER .)
    LTE             reduce using rule 10 (expr -> NUMBER .)
    GT              reduce using rule 10 (expr -> NUMBER .)
    GTE             reduce using rule 10 (expr -> NUMBER .)
    EQU             reduce using rule 10 (expr -> NUMBER .)
    NEQU            reduce using rule 10 (expr -> NUMBER .)
    AND             reduce using rule 10 (expr -> NUMBER .)
    OR              reduce using rule 10 (expr -> NUMBER .)
    ID              reduce using rule 10 (expr -> NUMBER .)
    NUMBER          reduce using rule 10 (expr -> NUMBER .)
    LPRAN           reduce using rule 10 (expr -> NUMBER .)
    $end            reduce using rule 10 (expr -> NUMBER .)
    RPRAN           reduce using rule 10 (expr -> NUMBER .)


state 8

    (24) expr -> LPRAN . expr RPRAN
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 27
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    expr                           shift and go to state 26

state 9

    (6) expr -> expr operator . expr
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 27
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    expr                           shift and go to state 28

state 10

    (7) expr -> expr relop . expr
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 27
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    expr                           shift and go to state 29

state 11

    (8) expr -> expr logic . expr
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 27
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    expr                           shift and go to state 30

state 12

    (11) operator -> TIMES .

    ID              reduce using rule 11 (operator -> TIMES .)
    NUMBER          reduce using rule 11 (operator -> TIMES .)
    LPRAN           reduce using rule 11 (operator -> TIMES .)


state 13

    (12) operator -> DIV .

    ID              reduce using rule 12 (operator -> DIV .)
    NUMBER          reduce using rule 12 (operator -> DIV .)
    LPRAN           reduce using rule 12 (operator -> DIV .)


state 14

    (13) operator -> PLUS .

    ID              reduce using rule 13 (operator -> PLUS .)
    NUMBER          reduce using rule 13 (operator -> PLUS .)
    LPRAN           reduce using rule 13 (operator -> PLUS .)


state 15

    (14) operator -> MINUS .

    ID              reduce using rule 14 (operator -> MINUS .)
    NUMBER          reduce using rule 14 (operator -> MINUS .)
    LPRAN           reduce using rule 14 (operator -> MINUS .)


state 16

    (15) operator -> MOD .

    ID              reduce using rule 15 (operator -> MOD .)
    NUMBER          reduce using rule 15 (operator -> MOD .)
    LPRAN           reduce using rule 15 (operator -> MOD .)


state 17

    (18) relop -> LT .

    ID              reduce using rule 18 (relop -> LT .)
    NUMBER          reduce using rule 18 (relop -> LT .)
    LPRAN           reduce using rule 18 (relop -> LT .)


state 18

    (19) relop -> LTE .

    ID              reduce using rule 19 (relop -> LTE .)
    NUMBER          reduce using rule 19 (relop -> LTE .)
    LPRAN           reduce using rule 19 (relop -> LTE .)


state 19

    (20) relop -> GT .

    ID              reduce using rule 20 (relop -> GT .)
    NUMBER          reduce using rule 20 (relop -> GT .)
    LPRAN           reduce using rule 20 (relop -> GT .)


state 20

    (21) relop -> GTE .

    ID              reduce using rule 21 (relop -> GTE .)
    NUMBER          reduce using rule 21 (relop -> GTE .)
    LPRAN           reduce using rule 21 (relop -> GTE .)


state 21

    (22) relop -> EQU .

    ID              reduce using rule 22 (relop -> EQU .)
    NUMBER          reduce using rule 22 (relop -> EQU .)
    LPRAN           reduce using rule 22 (relop -> EQU .)


state 22

    (23) relop -> NEQU .

    ID              reduce using rule 23 (relop -> NEQU .)
    NUMBER          reduce using rule 23 (relop -> NEQU .)
    LPRAN           reduce using rule 23 (relop -> NEQU .)


state 23

    (16) logic -> AND .

    ID              reduce using rule 16 (logic -> AND .)
    NUMBER          reduce using rule 16 (logic -> AND .)
    LPRAN           reduce using rule 16 (logic -> AND .)


state 24

    (17) logic -> OR .

    ID              reduce using rule 17 (logic -> OR .)
    NUMBER          reduce using rule 17 (logic -> OR .)
    LPRAN           reduce using rule 17 (logic -> OR .)


state 25

    (5) assignment -> ID EQ . expr
    (6) expr -> . expr operator expr
    (7) expr -> . expr relop expr
    (8) expr -> . expr logic expr
    (9) expr -> . ID
    (10) expr -> . NUMBER
    (24) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 27
    NUMBER          shift and go to state 7
    LPRAN           shift and go to state 8

    expr                           shift and go to state 31

state 26

    (24) expr -> LPRAN expr . RPRAN
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

    RPRAN           shift and go to state 32
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

    operator                       shift and go to state 9
    relop                          shift and go to state 10
    logic                          shift and go to state 11

state 27

    (9) expr -> ID .

    RPRAN           reduce using rule 9 (expr -> ID .)
    TIMES           reduce using rule 9 (expr -> ID .)
    DIV             reduce using rule 9 (expr -> ID .)
    PLUS            reduce using rule 9 (expr -> ID .)
    MINUS           reduce using rule 9 (expr -> ID .)
    MOD             reduce using rule 9 (expr -> ID .)
    LT              reduce using rule 9 (expr -> ID .)
    LTE             reduce using rule 9 (expr -> ID .)
    GT              reduce using rule 9 (expr -> ID .)
    GTE             reduce using rule 9 (expr -> ID .)
    EQU             reduce using rule 9 (expr -> ID .)
    NEQU            reduce using rule 9 (expr -> ID .)
    AND             reduce using rule 9 (expr -> ID .)
    OR              reduce using rule 9 (expr -> ID .)
    ID              reduce using rule 9 (expr -> ID .)
    NUMBER          reduce using rule 9 (expr -> ID .)
    LPRAN           reduce using rule 9 (expr -> ID .)
    $end            reduce using rule 9 (expr -> ID .)


state 28

    (6) expr -> expr operator expr .
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 6 (expr -> expr operator expr .)
    NUMBER          reduce using rule 6 (expr -> expr operator expr .)
    LPRAN           reduce using rule 6 (expr -> expr operator expr .)
    $end            reduce using rule 6 (expr -> expr operator expr .)
    RPRAN           reduce using rule 6 (expr -> expr operator expr .)
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

  ! TIMES           [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! DIV             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! PLUS            [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! MINUS           [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! MOD             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! LT              [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! LTE             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! GT              [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! GTE             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! EQU             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! NEQU            [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! AND             [ reduce using rule 6 (expr -> expr operator expr .) ]
  ! OR              [ reduce using rule 6 (expr -> expr operator expr .) ]

    operator                       shift and go to state 9
    relop                          shift and go to state 10
    logic                          shift and go to state 11

state 29

    (7) expr -> expr relop expr .
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 7 (expr -> expr relop expr .)
    NUMBER          reduce using rule 7 (expr -> expr relop expr .)
    LPRAN           reduce using rule 7 (expr -> expr relop expr .)
    $end            reduce using rule 7 (expr -> expr relop expr .)
    RPRAN           reduce using rule 7 (expr -> expr relop expr .)
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

  ! TIMES           [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! DIV             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! PLUS            [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! MINUS           [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! MOD             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! LT              [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! LTE             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! GT              [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! GTE             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! EQU             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! NEQU            [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! AND             [ reduce using rule 7 (expr -> expr relop expr .) ]
  ! OR              [ reduce using rule 7 (expr -> expr relop expr .) ]

    relop                          shift and go to state 10
    operator                       shift and go to state 9
    logic                          shift and go to state 11

state 30

    (8) expr -> expr logic expr .
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 8 (expr -> expr logic expr .)
    NUMBER          reduce using rule 8 (expr -> expr logic expr .)
    LPRAN           reduce using rule 8 (expr -> expr logic expr .)
    $end            reduce using rule 8 (expr -> expr logic expr .)
    RPRAN           reduce using rule 8 (expr -> expr logic expr .)
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

  ! TIMES           [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! DIV             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! PLUS            [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! LT              [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! LTE             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! GT              [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! GTE             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! EQU             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! NEQU            [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr logic expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr logic expr .) ]

    logic                          shift and go to state 11
    operator                       shift and go to state 9
    relop                          shift and go to state 10

state 31

    (5) assignment -> ID EQ expr .
    (6) expr -> expr . operator expr
    (7) expr -> expr . relop expr
    (8) expr -> expr . logic expr
    (11) operator -> . TIMES
    (12) operator -> . DIV
    (13) operator -> . PLUS
    (14) operator -> . MINUS
    (15) operator -> . MOD
    (18) relop -> . LT
    (19) relop -> . LTE
    (20) relop -> . GT
    (21) relop -> . GTE
    (22) relop -> . EQU
    (23) relop -> . NEQU
    (16) logic -> . AND
    (17) logic -> . OR

    ID              reduce using rule 5 (assignment -> ID EQ expr .)
    NUMBER          reduce using rule 5 (assignment -> ID EQ expr .)
    LPRAN           reduce using rule 5 (assignment -> ID EQ expr .)
    $end            reduce using rule 5 (assignment -> ID EQ expr .)
    TIMES           shift and go to state 12
    DIV             shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    MOD             shift and go to state 16
    LT              shift and go to state 17
    LTE             shift and go to state 18
    GT              shift and go to state 19
    GTE             shift and go to state 20
    EQU             shift and go to state 21
    NEQU            shift and go to state 22
    AND             shift and go to state 23
    OR              shift and go to state 24

    operator                       shift and go to state 9
    relop                          shift and go to state 10
    logic                          shift and go to state 11

state 32

    (24) expr -> LPRAN expr RPRAN .

    TIMES           reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    DIV             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    PLUS            reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    MINUS           reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    MOD             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    LT              reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    LTE             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    GT              reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    GTE             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    EQU             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    NEQU            reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    AND             reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    OR              reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    ID              reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    NUMBER          reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    LPRAN           reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    $end            reduce using rule 24 (expr -> LPRAN expr RPRAN .)
    RPRAN           reduce using rule 24 (expr -> LPRAN expr RPRAN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 28 resolved as shift
WARNING: shift/reduce conflict for DIV in state 28 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 28 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 28 resolved as shift
WARNING: shift/reduce conflict for MOD in state 28 resolved as shift
WARNING: shift/reduce conflict for LT in state 28 resolved as shift
WARNING: shift/reduce conflict for LTE in state 28 resolved as shift
WARNING: shift/reduce conflict for GT in state 28 resolved as shift
WARNING: shift/reduce conflict for GTE in state 28 resolved as shift
WARNING: shift/reduce conflict for EQU in state 28 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 28 resolved as shift
WARNING: shift/reduce conflict for AND in state 28 resolved as shift
WARNING: shift/reduce conflict for OR in state 28 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for DIV in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MOD in state 29 resolved as shift
WARNING: shift/reduce conflict for LT in state 29 resolved as shift
WARNING: shift/reduce conflict for LTE in state 29 resolved as shift
WARNING: shift/reduce conflict for GT in state 29 resolved as shift
WARNING: shift/reduce conflict for GTE in state 29 resolved as shift
WARNING: shift/reduce conflict for EQU in state 29 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 29 resolved as shift
WARNING: shift/reduce conflict for AND in state 29 resolved as shift
WARNING: shift/reduce conflict for OR in state 29 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 30 resolved as shift
WARNING: shift/reduce conflict for DIV in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MOD in state 30 resolved as shift
WARNING: shift/reduce conflict for LT in state 30 resolved as shift
WARNING: shift/reduce conflict for LTE in state 30 resolved as shift
WARNING: shift/reduce conflict for GT in state 30 resolved as shift
WARNING: shift/reduce conflict for GTE in state 30 resolved as shift
WARNING: shift/reduce conflict for EQU in state 30 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 30 resolved as shift
WARNING: shift/reduce conflict for AND in state 30 resolved as shift
WARNING: shift/reduce conflict for OR in state 30 resolved as shift
