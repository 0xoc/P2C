Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    COMMENTS
    CONTINUE
    ELIF
    ELSE
    FOR
    IN
    NOT
    RANGE
    SEP
    WHILE

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> empty
Rule 3     statement -> assignment
Rule 4     statement -> if
Rule 5     statement -> expr
Rule 6     if -> IF expr COLON LBRACE statements RBRACE
Rule 7     assignment -> ID EQ expr
Rule 8     expr -> expr operator expr
Rule 9     expr -> expr relop expr
Rule 10    expr -> expr logic expr
Rule 11    expr -> ID
Rule 12    expr -> NUMBER
Rule 13    operator -> TIMES
Rule 14    operator -> DIV
Rule 15    operator -> PLUS
Rule 16    operator -> MINUS
Rule 17    operator -> MOD
Rule 18    logic -> AND
Rule 19    logic -> OR
Rule 20    relop -> LT
Rule 21    relop -> LTE
Rule 22    relop -> GT
Rule 23    relop -> GTE
Rule 24    relop -> EQU
Rule 25    relop -> NEQU
Rule 26    expr -> LPRAN expr RPRAN
Rule 27    empty -> <empty>

Terminals, with rules where they appear

AND                  : 18
BREAK                : 
COLON                : 6
COMMENTS             : 
CONTINUE             : 
DIV                  : 14
ELIF                 : 
ELSE                 : 
EQ                   : 7
EQU                  : 24
FOR                  : 
GT                   : 22
GTE                  : 23
ID                   : 7 11
IF                   : 6
IN                   : 
LBRACE               : 6
LPRAN                : 26
LT                   : 20
LTE                  : 21
MINUS                : 16
MOD                  : 17
NEQU                 : 25
NOT                  : 
NUMBER               : 12
OR                   : 19
PLUS                 : 15
RANGE                : 
RBRACE               : 6
RPRAN                : 26
SEP                  : 
TIMES                : 13
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 3
empty                : 2
expr                 : 5 6 7 8 8 9 9 10 10 26
if                   : 4
logic                : 10
operator             : 8
relop                : 9
statement            : 1
statements           : 1 6 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . empty
    (27) empty -> .

    ID              reduce using rule 27 (empty -> .)
    IF              reduce using rule 27 (empty -> .)
    NUMBER          reduce using rule 27 (empty -> .)
    LPRAN           reduce using rule 27 (empty -> .)
    $end            reduce using rule 27 (empty -> .)

    statements                     shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . expr
    (7) assignment -> . ID EQ expr
    (6) if -> . IF expr COLON LBRACE statements RBRACE
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 7
    IF              shift and go to state 8
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5
    expr                           shift and go to state 6

state 2

    (2) statements -> empty .

    ID              reduce using rule 2 (statements -> empty .)
    IF              reduce using rule 2 (statements -> empty .)
    NUMBER          reduce using rule 2 (statements -> empty .)
    LPRAN           reduce using rule 2 (statements -> empty .)
    $end            reduce using rule 2 (statements -> empty .)
    RBRACE          reduce using rule 2 (statements -> empty .)


state 3

    (1) statements -> statements statement .

    ID              reduce using rule 1 (statements -> statements statement .)
    IF              reduce using rule 1 (statements -> statements statement .)
    NUMBER          reduce using rule 1 (statements -> statements statement .)
    LPRAN           reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)
    RBRACE          reduce using rule 1 (statements -> statements statement .)


state 4

    (3) statement -> assignment .

    ID              reduce using rule 3 (statement -> assignment .)
    IF              reduce using rule 3 (statement -> assignment .)
    NUMBER          reduce using rule 3 (statement -> assignment .)
    LPRAN           reduce using rule 3 (statement -> assignment .)
    $end            reduce using rule 3 (statement -> assignment .)
    RBRACE          reduce using rule 3 (statement -> assignment .)


state 5

    (4) statement -> if .

    ID              reduce using rule 4 (statement -> if .)
    IF              reduce using rule 4 (statement -> if .)
    NUMBER          reduce using rule 4 (statement -> if .)
    LPRAN           reduce using rule 4 (statement -> if .)
    $end            reduce using rule 4 (statement -> if .)
    RBRACE          reduce using rule 4 (statement -> if .)


state 6

    (5) statement -> expr .
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

    ID              reduce using rule 5 (statement -> expr .)
    IF              reduce using rule 5 (statement -> expr .)
    NUMBER          reduce using rule 5 (statement -> expr .)
    LPRAN           reduce using rule 5 (statement -> expr .)
    $end            reduce using rule 5 (statement -> expr .)
    RBRACE          reduce using rule 5 (statement -> expr .)
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

    operator                       shift and go to state 11
    relop                          shift and go to state 12
    logic                          shift and go to state 13

state 7

    (7) assignment -> ID . EQ expr
    (11) expr -> ID .

    EQ              shift and go to state 27
    TIMES           reduce using rule 11 (expr -> ID .)
    DIV             reduce using rule 11 (expr -> ID .)
    PLUS            reduce using rule 11 (expr -> ID .)
    MINUS           reduce using rule 11 (expr -> ID .)
    MOD             reduce using rule 11 (expr -> ID .)
    LT              reduce using rule 11 (expr -> ID .)
    LTE             reduce using rule 11 (expr -> ID .)
    GT              reduce using rule 11 (expr -> ID .)
    GTE             reduce using rule 11 (expr -> ID .)
    EQU             reduce using rule 11 (expr -> ID .)
    NEQU            reduce using rule 11 (expr -> ID .)
    AND             reduce using rule 11 (expr -> ID .)
    OR              reduce using rule 11 (expr -> ID .)
    ID              reduce using rule 11 (expr -> ID .)
    IF              reduce using rule 11 (expr -> ID .)
    NUMBER          reduce using rule 11 (expr -> ID .)
    LPRAN           reduce using rule 11 (expr -> ID .)
    $end            reduce using rule 11 (expr -> ID .)
    RBRACE          reduce using rule 11 (expr -> ID .)


state 8

    (6) if -> IF . expr COLON LBRACE statements RBRACE
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 28

state 9

    (12) expr -> NUMBER .

    TIMES           reduce using rule 12 (expr -> NUMBER .)
    DIV             reduce using rule 12 (expr -> NUMBER .)
    PLUS            reduce using rule 12 (expr -> NUMBER .)
    MINUS           reduce using rule 12 (expr -> NUMBER .)
    MOD             reduce using rule 12 (expr -> NUMBER .)
    LT              reduce using rule 12 (expr -> NUMBER .)
    LTE             reduce using rule 12 (expr -> NUMBER .)
    GT              reduce using rule 12 (expr -> NUMBER .)
    GTE             reduce using rule 12 (expr -> NUMBER .)
    EQU             reduce using rule 12 (expr -> NUMBER .)
    NEQU            reduce using rule 12 (expr -> NUMBER .)
    AND             reduce using rule 12 (expr -> NUMBER .)
    OR              reduce using rule 12 (expr -> NUMBER .)
    ID              reduce using rule 12 (expr -> NUMBER .)
    IF              reduce using rule 12 (expr -> NUMBER .)
    NUMBER          reduce using rule 12 (expr -> NUMBER .)
    LPRAN           reduce using rule 12 (expr -> NUMBER .)
    $end            reduce using rule 12 (expr -> NUMBER .)
    COLON           reduce using rule 12 (expr -> NUMBER .)
    RPRAN           reduce using rule 12 (expr -> NUMBER .)
    RBRACE          reduce using rule 12 (expr -> NUMBER .)


state 10

    (26) expr -> LPRAN . expr RPRAN
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 30

state 11

    (8) expr -> expr operator . expr
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 31

state 12

    (9) expr -> expr relop . expr
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 32

state 13

    (10) expr -> expr logic . expr
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 33

state 14

    (13) operator -> TIMES .

    ID              reduce using rule 13 (operator -> TIMES .)
    NUMBER          reduce using rule 13 (operator -> TIMES .)
    LPRAN           reduce using rule 13 (operator -> TIMES .)


state 15

    (14) operator -> DIV .

    ID              reduce using rule 14 (operator -> DIV .)
    NUMBER          reduce using rule 14 (operator -> DIV .)
    LPRAN           reduce using rule 14 (operator -> DIV .)


state 16

    (15) operator -> PLUS .

    ID              reduce using rule 15 (operator -> PLUS .)
    NUMBER          reduce using rule 15 (operator -> PLUS .)
    LPRAN           reduce using rule 15 (operator -> PLUS .)


state 17

    (16) operator -> MINUS .

    ID              reduce using rule 16 (operator -> MINUS .)
    NUMBER          reduce using rule 16 (operator -> MINUS .)
    LPRAN           reduce using rule 16 (operator -> MINUS .)


state 18

    (17) operator -> MOD .

    ID              reduce using rule 17 (operator -> MOD .)
    NUMBER          reduce using rule 17 (operator -> MOD .)
    LPRAN           reduce using rule 17 (operator -> MOD .)


state 19

    (20) relop -> LT .

    ID              reduce using rule 20 (relop -> LT .)
    NUMBER          reduce using rule 20 (relop -> LT .)
    LPRAN           reduce using rule 20 (relop -> LT .)


state 20

    (21) relop -> LTE .

    ID              reduce using rule 21 (relop -> LTE .)
    NUMBER          reduce using rule 21 (relop -> LTE .)
    LPRAN           reduce using rule 21 (relop -> LTE .)


state 21

    (22) relop -> GT .

    ID              reduce using rule 22 (relop -> GT .)
    NUMBER          reduce using rule 22 (relop -> GT .)
    LPRAN           reduce using rule 22 (relop -> GT .)


state 22

    (23) relop -> GTE .

    ID              reduce using rule 23 (relop -> GTE .)
    NUMBER          reduce using rule 23 (relop -> GTE .)
    LPRAN           reduce using rule 23 (relop -> GTE .)


state 23

    (24) relop -> EQU .

    ID              reduce using rule 24 (relop -> EQU .)
    NUMBER          reduce using rule 24 (relop -> EQU .)
    LPRAN           reduce using rule 24 (relop -> EQU .)


state 24

    (25) relop -> NEQU .

    ID              reduce using rule 25 (relop -> NEQU .)
    NUMBER          reduce using rule 25 (relop -> NEQU .)
    LPRAN           reduce using rule 25 (relop -> NEQU .)


state 25

    (18) logic -> AND .

    ID              reduce using rule 18 (logic -> AND .)
    NUMBER          reduce using rule 18 (logic -> AND .)
    LPRAN           reduce using rule 18 (logic -> AND .)


state 26

    (19) logic -> OR .

    ID              reduce using rule 19 (logic -> OR .)
    NUMBER          reduce using rule 19 (logic -> OR .)
    LPRAN           reduce using rule 19 (logic -> OR .)


state 27

    (7) assignment -> ID EQ . expr
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    ID              shift and go to state 29
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 34

state 28

    (6) if -> IF expr . COLON LBRACE statements RBRACE
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

    COLON           shift and go to state 35
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

    operator                       shift and go to state 11
    relop                          shift and go to state 12
    logic                          shift and go to state 13

state 29

    (11) expr -> ID .

    COLON           reduce using rule 11 (expr -> ID .)
    TIMES           reduce using rule 11 (expr -> ID .)
    DIV             reduce using rule 11 (expr -> ID .)
    PLUS            reduce using rule 11 (expr -> ID .)
    MINUS           reduce using rule 11 (expr -> ID .)
    MOD             reduce using rule 11 (expr -> ID .)
    LT              reduce using rule 11 (expr -> ID .)
    LTE             reduce using rule 11 (expr -> ID .)
    GT              reduce using rule 11 (expr -> ID .)
    GTE             reduce using rule 11 (expr -> ID .)
    EQU             reduce using rule 11 (expr -> ID .)
    NEQU            reduce using rule 11 (expr -> ID .)
    AND             reduce using rule 11 (expr -> ID .)
    OR              reduce using rule 11 (expr -> ID .)
    RPRAN           reduce using rule 11 (expr -> ID .)
    ID              reduce using rule 11 (expr -> ID .)
    IF              reduce using rule 11 (expr -> ID .)
    NUMBER          reduce using rule 11 (expr -> ID .)
    LPRAN           reduce using rule 11 (expr -> ID .)
    $end            reduce using rule 11 (expr -> ID .)
    RBRACE          reduce using rule 11 (expr -> ID .)


state 30

    (26) expr -> LPRAN expr . RPRAN
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

    RPRAN           shift and go to state 36
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

    operator                       shift and go to state 11
    relop                          shift and go to state 12
    logic                          shift and go to state 13

state 31

    (8) expr -> expr operator expr .
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 8 (expr -> expr operator expr .)
    IF              reduce using rule 8 (expr -> expr operator expr .)
    NUMBER          reduce using rule 8 (expr -> expr operator expr .)
    LPRAN           reduce using rule 8 (expr -> expr operator expr .)
    $end            reduce using rule 8 (expr -> expr operator expr .)
    COLON           reduce using rule 8 (expr -> expr operator expr .)
    RPRAN           reduce using rule 8 (expr -> expr operator expr .)
    RBRACE          reduce using rule 8 (expr -> expr operator expr .)
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! TIMES           [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! DIV             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! PLUS            [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! LT              [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! LTE             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! GT              [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! GTE             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! EQU             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! NEQU            [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr operator expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr operator expr .) ]

    operator                       shift and go to state 11
    relop                          shift and go to state 12
    logic                          shift and go to state 13

state 32

    (9) expr -> expr relop expr .
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 9 (expr -> expr relop expr .)
    IF              reduce using rule 9 (expr -> expr relop expr .)
    NUMBER          reduce using rule 9 (expr -> expr relop expr .)
    LPRAN           reduce using rule 9 (expr -> expr relop expr .)
    $end            reduce using rule 9 (expr -> expr relop expr .)
    COLON           reduce using rule 9 (expr -> expr relop expr .)
    RPRAN           reduce using rule 9 (expr -> expr relop expr .)
    RBRACE          reduce using rule 9 (expr -> expr relop expr .)
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! TIMES           [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! DIV             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! PLUS            [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! MINUS           [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! MOD             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! LT              [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! LTE             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! GT              [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! GTE             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! EQU             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! NEQU            [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! AND             [ reduce using rule 9 (expr -> expr relop expr .) ]
  ! OR              [ reduce using rule 9 (expr -> expr relop expr .) ]

    relop                          shift and go to state 12
    operator                       shift and go to state 11
    logic                          shift and go to state 13

state 33

    (10) expr -> expr logic expr .
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for EQU resolved as shift
  ! shift/reduce conflict for NEQU resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 10 (expr -> expr logic expr .)
    IF              reduce using rule 10 (expr -> expr logic expr .)
    NUMBER          reduce using rule 10 (expr -> expr logic expr .)
    LPRAN           reduce using rule 10 (expr -> expr logic expr .)
    $end            reduce using rule 10 (expr -> expr logic expr .)
    COLON           reduce using rule 10 (expr -> expr logic expr .)
    RPRAN           reduce using rule 10 (expr -> expr logic expr .)
    RBRACE          reduce using rule 10 (expr -> expr logic expr .)
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

  ! TIMES           [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! DIV             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! PLUS            [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! LT              [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! LTE             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! GT              [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! GTE             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! EQU             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! NEQU            [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr logic expr .) ]
  ! OR              [ reduce using rule 10 (expr -> expr logic expr .) ]

    logic                          shift and go to state 13
    operator                       shift and go to state 11
    relop                          shift and go to state 12

state 34

    (7) assignment -> ID EQ expr .
    (8) expr -> expr . operator expr
    (9) expr -> expr . relop expr
    (10) expr -> expr . logic expr
    (13) operator -> . TIMES
    (14) operator -> . DIV
    (15) operator -> . PLUS
    (16) operator -> . MINUS
    (17) operator -> . MOD
    (20) relop -> . LT
    (21) relop -> . LTE
    (22) relop -> . GT
    (23) relop -> . GTE
    (24) relop -> . EQU
    (25) relop -> . NEQU
    (18) logic -> . AND
    (19) logic -> . OR

    ID              reduce using rule 7 (assignment -> ID EQ expr .)
    IF              reduce using rule 7 (assignment -> ID EQ expr .)
    NUMBER          reduce using rule 7 (assignment -> ID EQ expr .)
    LPRAN           reduce using rule 7 (assignment -> ID EQ expr .)
    $end            reduce using rule 7 (assignment -> ID EQ expr .)
    RBRACE          reduce using rule 7 (assignment -> ID EQ expr .)
    TIMES           shift and go to state 14
    DIV             shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MOD             shift and go to state 18
    LT              shift and go to state 19
    LTE             shift and go to state 20
    GT              shift and go to state 21
    GTE             shift and go to state 22
    EQU             shift and go to state 23
    NEQU            shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26

    operator                       shift and go to state 11
    relop                          shift and go to state 12
    logic                          shift and go to state 13

state 35

    (6) if -> IF expr COLON . LBRACE statements RBRACE

    LBRACE          shift and go to state 37


state 36

    (26) expr -> LPRAN expr RPRAN .

    TIMES           reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    DIV             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    PLUS            reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    MINUS           reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    MOD             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    LT              reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    LTE             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    GT              reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    GTE             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    EQU             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    NEQU            reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    AND             reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    OR              reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    ID              reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    IF              reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    NUMBER          reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    LPRAN           reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    $end            reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    COLON           reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    RPRAN           reduce using rule 26 (expr -> LPRAN expr RPRAN .)
    RBRACE          reduce using rule 26 (expr -> LPRAN expr RPRAN .)


state 37

    (6) if -> IF expr COLON LBRACE . statements RBRACE
    (1) statements -> . statements statement
    (2) statements -> . empty
    (27) empty -> .

    RBRACE          reduce using rule 27 (empty -> .)
    ID              reduce using rule 27 (empty -> .)
    IF              reduce using rule 27 (empty -> .)
    NUMBER          reduce using rule 27 (empty -> .)
    LPRAN           reduce using rule 27 (empty -> .)

    statements                     shift and go to state 38
    empty                          shift and go to state 2

state 38

    (6) if -> IF expr COLON LBRACE statements . RBRACE
    (1) statements -> statements . statement
    (3) statement -> . assignment
    (4) statement -> . if
    (5) statement -> . expr
    (7) assignment -> . ID EQ expr
    (6) if -> . IF expr COLON LBRACE statements RBRACE
    (8) expr -> . expr operator expr
    (9) expr -> . expr relop expr
    (10) expr -> . expr logic expr
    (11) expr -> . ID
    (12) expr -> . NUMBER
    (26) expr -> . LPRAN expr RPRAN

    RBRACE          shift and go to state 39
    ID              shift and go to state 7
    IF              shift and go to state 8
    NUMBER          shift and go to state 9
    LPRAN           shift and go to state 10

    expr                           shift and go to state 6
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    if                             shift and go to state 5

state 39

    (6) if -> IF expr COLON LBRACE statements RBRACE .

    ID              reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)
    IF              reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)
    NUMBER          reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)
    LPRAN           reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)
    $end            reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)
    RBRACE          reduce using rule 6 (if -> IF expr COLON LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 31 resolved as shift
WARNING: shift/reduce conflict for DIV in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MOD in state 31 resolved as shift
WARNING: shift/reduce conflict for LT in state 31 resolved as shift
WARNING: shift/reduce conflict for LTE in state 31 resolved as shift
WARNING: shift/reduce conflict for GT in state 31 resolved as shift
WARNING: shift/reduce conflict for GTE in state 31 resolved as shift
WARNING: shift/reduce conflict for EQU in state 31 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 31 resolved as shift
WARNING: shift/reduce conflict for OR in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for DIV in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MOD in state 32 resolved as shift
WARNING: shift/reduce conflict for LT in state 32 resolved as shift
WARNING: shift/reduce conflict for LTE in state 32 resolved as shift
WARNING: shift/reduce conflict for GT in state 32 resolved as shift
WARNING: shift/reduce conflict for GTE in state 32 resolved as shift
WARNING: shift/reduce conflict for EQU in state 32 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 32 resolved as shift
WARNING: shift/reduce conflict for AND in state 32 resolved as shift
WARNING: shift/reduce conflict for OR in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 33 resolved as shift
WARNING: shift/reduce conflict for DIV in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MOD in state 33 resolved as shift
WARNING: shift/reduce conflict for LT in state 33 resolved as shift
WARNING: shift/reduce conflict for LTE in state 33 resolved as shift
WARNING: shift/reduce conflict for GT in state 33 resolved as shift
WARNING: shift/reduce conflict for GTE in state 33 resolved as shift
WARNING: shift/reduce conflict for EQU in state 33 resolved as shift
WARNING: shift/reduce conflict for NEQU in state 33 resolved as shift
WARNING: shift/reduce conflict for AND in state 33 resolved as shift
WARNING: shift/reduce conflict for OR in state 33 resolved as shift
