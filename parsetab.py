
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocGTEGTLTELTEQUNEQUANDORrightPLUSMINUSrightTIMESDIVMODrightNOTAND BREAK COLON COMMENTS CONTINUE DIV DIV_EQUAL ELIF ELSE EQ EQU FALSE FOR GT GTE ID IF IN LBRACE LPRAN LT LTE MINUS MINUS_EQUAL MOD NEQU NOT NUMBER OR PLUS PLUS_EQUAL RANGE RBRACE RPRAN SEP TIMES TIMES_EQUAL TRUE WHILE\n        statements : statements statement\n        | empty\n        \n        statement : assignment\n        | if\n        | while\n        | expr\n        | CONTINUE\n        | BREAK\n        \n        while : WHILE expr COLON LBRACE statements RBRACE\n        \n        if : IF expr COLON LBRACE statements RBRACE elif\n        \n        elif : ELIF expr COLON LBRACE statements RBRACE elif\n        | else\n        \n        else : ELSE COLON LBRACE statements RBRACE\n        | empty\n        \n        assignment : ID EQ expr\n                   | ID PLUS_EQUAL expr\n                   | ID MINUS_EQUAL expr\n                   | ID TIMES_EQUAL expr\n        \n        expr : expr operator expr\n        | expr relop expr\n        | expr logic expr\n        | ID\n        | NUMBER\n        | TRUE\n        | FALSE\n        \n        operator : TIMES\n                | DIV\n                |  PLUS\n                |  MINUS\n                |  MOD\n        \n        logic : AND\n              | OR\n        \n        relop : LT\n                | LTE\n                |  GT\n                |  GTE\n                |  EQU\n                |  NEQU\n        \n        expr : LPRAN expr RPRAN\n        empty :'
    
_lr_action_items = {'CONTINUE':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,59,61,65,66,67,68,69,70,71,],[-40,8,-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,8,8,-40,-9,-10,-12,-14,-40,-40,8,8,-13,-40,-11,]),'BREAK':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,59,61,65,66,67,68,69,70,71,],[-40,9,-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,9,9,-40,-9,-10,-12,-14,-40,-40,9,9,-13,-40,-11,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,],[-40,10,-2,-1,-3,-4,-5,-6,-7,-8,-22,38,38,-23,-24,-25,38,38,38,38,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-38,-31,-32,38,38,38,38,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,10,10,-40,-9,-10,38,-12,-14,-40,-40,10,10,-13,-40,-11,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,59,61,65,66,67,68,69,70,71,],[-40,11,-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,11,11,-40,-9,-10,-12,-14,-40,-40,11,11,-13,-40,-11,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,59,61,65,66,67,68,69,70,71,],[-40,12,-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,12,12,-40,-9,-10,-12,-14,-40,-40,12,12,-13,-40,-11,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,],[-40,13,-2,-1,-3,-4,-5,-6,-7,-8,-22,13,13,-23,-24,-25,13,13,13,13,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-38,-31,-32,13,13,13,13,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,13,13,-40,-9,-10,13,-12,-14,-40,-40,13,13,-13,-40,-11,]),'TRUE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,],[-40,14,-2,-1,-3,-4,-5,-6,-7,-8,-22,14,14,-23,-24,-25,14,14,14,14,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-38,-31,-32,14,14,14,14,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,14,14,-40,-9,-10,14,-12,-14,-40,-40,14,14,-13,-40,-11,]),'FALSE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,],[-40,15,-2,-1,-3,-4,-5,-6,-7,-8,-22,15,15,-23,-24,-25,15,15,15,15,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-38,-31,-32,15,15,15,15,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,15,15,-40,-9,-10,15,-12,-14,-40,-40,15,15,-13,-40,-11,]),'LPRAN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,61,65,66,67,68,69,70,71,],[-40,16,-2,-1,-3,-4,-5,-6,-7,-8,-22,16,16,-23,-24,-25,16,16,16,16,-26,-27,-28,-29,-30,-33,-34,-35,-36,-37,-38,-31,-32,16,16,16,16,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,16,16,-40,-9,-10,16,-12,-14,-40,-40,16,16,-13,-40,-11,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,55,56,57,59,61,69,70,71,],[-40,0,-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-9,-10,-12,-14,-13,-40,-11,]),'RBRACE':([2,3,4,5,6,7,8,9,10,13,14,15,38,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,59,61,65,66,67,68,69,70,71,],[-2,-1,-3,-4,-5,-6,-7,-8,-22,-23,-24,-25,-22,-19,-20,-21,-15,-16,-17,-18,-39,-40,-40,55,56,-40,-9,-10,-12,-14,-40,-40,69,70,-13,-40,-11,]),'TIMES':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[20,-22,-23,-24,-25,20,-22,20,20,20,20,20,20,20,20,20,-39,20,]),'DIV':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[21,-22,-23,-24,-25,21,-22,21,21,21,21,21,21,21,21,21,-39,21,]),'PLUS':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[22,-22,-23,-24,-25,22,-22,22,22,22,22,22,22,22,22,22,-39,22,]),'MINUS':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[23,-22,-23,-24,-25,23,-22,23,23,23,23,23,23,23,23,23,-39,23,]),'MOD':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[24,-22,-23,-24,-25,24,-22,24,24,24,24,24,24,24,24,24,-39,24,]),'LT':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[25,-22,-23,-24,-25,25,-22,25,25,25,25,25,25,25,25,25,-39,25,]),'LTE':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[26,-22,-23,-24,-25,26,-22,26,26,26,26,26,26,26,26,26,-39,26,]),'GT':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[27,-22,-23,-24,-25,27,-22,27,27,27,27,27,27,27,27,27,-39,27,]),'GTE':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[28,-22,-23,-24,-25,28,-22,28,28,28,28,28,28,28,28,28,-39,28,]),'EQU':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[29,-22,-23,-24,-25,29,-22,29,29,29,29,29,29,29,29,29,-39,29,]),'NEQU':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[30,-22,-23,-24,-25,30,-22,30,30,30,30,30,30,30,30,30,-39,30,]),'AND':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[31,-22,-23,-24,-25,31,-22,31,31,31,31,31,31,31,31,31,-39,31,]),'OR':([7,10,13,14,15,37,38,39,40,41,42,43,44,45,46,47,50,62,],[32,-22,-23,-24,-25,32,-22,32,32,32,32,32,32,32,32,32,-39,32,]),'EQ':([10,],[33,]),'PLUS_EQUAL':([10,],[34,]),'MINUS_EQUAL':([10,],[35,]),'TIMES_EQUAL':([10,],[36,]),'COLON':([13,14,15,37,38,39,41,42,43,50,60,62,],[-23,-24,-25,48,-22,49,-19,-20,-21,-39,63,64,]),'RPRAN':([13,14,15,38,40,41,42,43,50,],[-23,-24,-25,-22,50,-19,-20,-21,-39,]),'LBRACE':([48,49,63,64,],[51,52,65,66,]),'ELIF':([55,70,],[58,58,]),'ELSE':([55,70,],[60,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,51,52,65,66,],[1,53,54,67,68,]),'empty':([0,51,52,55,65,66,70,],[2,2,2,61,2,2,61,]),'statement':([1,53,54,67,68,],[3,3,3,3,3,]),'assignment':([1,53,54,67,68,],[4,4,4,4,4,]),'if':([1,53,54,67,68,],[5,5,5,5,5,]),'while':([1,53,54,67,68,],[6,6,6,6,6,]),'expr':([1,11,12,16,17,18,19,33,34,35,36,53,54,58,67,68,],[7,37,39,40,41,42,43,44,45,46,47,7,7,62,7,7,]),'operator':([7,37,39,40,41,42,43,44,45,46,47,62,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'relop':([7,37,39,40,41,42,43,44,45,46,47,62,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'logic':([7,37,39,40,41,42,43,44,45,46,47,62,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'elif':([55,70,],[57,71,]),'else':([55,70,],[59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',23),
  ('statements -> empty','statements',1,'p_statements','parser.py',24),
  ('statement -> assignment','statement',1,'p_statement','parser.py',34),
  ('statement -> if','statement',1,'p_statement','parser.py',35),
  ('statement -> while','statement',1,'p_statement','parser.py',36),
  ('statement -> expr','statement',1,'p_statement','parser.py',37),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',38),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',39),
  ('while -> WHILE expr COLON LBRACE statements RBRACE','while',6,'p_while','parser.py',45),
  ('if -> IF expr COLON LBRACE statements RBRACE elif','if',7,'p_if','parser.py',51),
  ('elif -> ELIF expr COLON LBRACE statements RBRACE elif','elif',7,'p_elif','parser.py',57),
  ('elif -> else','elif',1,'p_elif','parser.py',58),
  ('else -> ELSE COLON LBRACE statements RBRACE','else',5,'p_else','parser.py',67),
  ('else -> empty','else',1,'p_else','parser.py',68),
  ('assignment -> ID EQ expr','assignment',3,'p_assignment','parser.py',75),
  ('assignment -> ID PLUS_EQUAL expr','assignment',3,'p_assignment','parser.py',76),
  ('assignment -> ID MINUS_EQUAL expr','assignment',3,'p_assignment','parser.py',77),
  ('assignment -> ID TIMES_EQUAL expr','assignment',3,'p_assignment','parser.py',78),
  ('expr -> expr operator expr','expr',3,'p_expr_operator_relop','parser.py',84),
  ('expr -> expr relop expr','expr',3,'p_expr_operator_relop','parser.py',85),
  ('expr -> expr logic expr','expr',3,'p_expr_operator_relop','parser.py',86),
  ('expr -> ID','expr',1,'p_expr_operator_relop','parser.py',87),
  ('expr -> NUMBER','expr',1,'p_expr_operator_relop','parser.py',88),
  ('expr -> TRUE','expr',1,'p_expr_operator_relop','parser.py',89),
  ('expr -> FALSE','expr',1,'p_expr_operator_relop','parser.py',90),
  ('operator -> TIMES','operator',1,'p_operator','parser.py',99),
  ('operator -> DIV','operator',1,'p_operator','parser.py',100),
  ('operator -> PLUS','operator',1,'p_operator','parser.py',101),
  ('operator -> MINUS','operator',1,'p_operator','parser.py',102),
  ('operator -> MOD','operator',1,'p_operator','parser.py',103),
  ('logic -> AND','logic',1,'p_logic','parser.py',109),
  ('logic -> OR','logic',1,'p_logic','parser.py',110),
  ('relop -> LT','relop',1,'p_relop','parser.py',116),
  ('relop -> LTE','relop',1,'p_relop','parser.py',117),
  ('relop -> GT','relop',1,'p_relop','parser.py',118),
  ('relop -> GTE','relop',1,'p_relop','parser.py',119),
  ('relop -> EQU','relop',1,'p_relop','parser.py',120),
  ('relop -> NEQU','relop',1,'p_relop','parser.py',121),
  ('expr -> LPRAN expr RPRAN','expr',3,'p_expr_pran','parser.py',127),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',132),
]
