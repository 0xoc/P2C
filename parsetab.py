
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMENTS EQ False ID LBRACE LOGIC LPRAN NUMBER OPERATOR RBRACE RELOP RPRAN SEP True break continue else for if in range while\n        program : ID EQ expr\n        | expr\n        | empty\n        \n        expr : expr OPERATOR expr\n        | expr RELOP expr\n        | expr LOGIC expr\n        | ID\n        | NUMBER\n        \n        expr : LPRAN expr RPRAN\n        empty :'
    
_lr_action_items = {'ID':([0,6,7,8,9,10,],[2,12,12,12,12,12,]),'NUMBER':([0,6,7,8,9,10,],[5,5,5,5,5,5,]),'LPRAN':([0,6,7,8,9,10,],[6,6,6,6,6,6,]),'$end':([0,1,2,3,4,5,12,13,14,15,16,17,],[-10,0,-7,-2,-3,-8,-7,-1,-4,-5,-6,-9,]),'EQ':([2,],[7,]),'OPERATOR':([2,3,5,11,12,13,14,15,16,17,],[-7,8,-8,8,-7,8,8,8,8,-9,]),'RELOP':([2,3,5,11,12,13,14,15,16,17,],[-7,9,-8,9,-7,9,9,9,9,-9,]),'LOGIC':([2,3,5,11,12,13,14,15,16,17,],[-7,10,-8,10,-7,10,10,10,10,-9,]),'RPRAN':([5,11,12,14,15,16,17,],[-8,17,-7,-4,-5,-6,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'expr':([0,6,7,8,9,10,],[3,11,13,14,15,16,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ID EQ expr','program',3,'p_program_assignment','parser.py',14),
  ('program -> expr','program',1,'p_program_assignment','parser.py',15),
  ('program -> empty','program',1,'p_program_assignment','parser.py',16),
  ('expr -> expr OPERATOR expr','expr',3,'p_expr_operator_relop','parser.py',26),
  ('expr -> expr RELOP expr','expr',3,'p_expr_operator_relop','parser.py',27),
  ('expr -> expr LOGIC expr','expr',3,'p_expr_operator_relop','parser.py',28),
  ('expr -> ID','expr',1,'p_expr_operator_relop','parser.py',29),
  ('expr -> NUMBER','expr',1,'p_expr_operator_relop','parser.py',30),
  ('expr -> LPRAN expr RPRAN','expr',3,'p_expr_pran','parser.py',39),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',44),
]
