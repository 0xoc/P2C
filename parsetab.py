
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocGTEGTLTELTEQUNEQUANDORrightPLUSMINUSrightTIMESDIVMODrightNOTAND BREAK COLON COMMENTS CONTINUE DIV DIV_EQUAL ELIF ELSE EQ EQU FALSE FOR GT GTE ID IF IN LBRACE LPRAN LT LTE MINUS MINUS_EQUAL MOD NEQU NOT NUMBER OR PLUS PLUS_EQUAL RANGE RBRACE RPRAN SEP TIMES TIMES_EQUAL TRUE WHILE\n        statements : statements statement\n        | empty\n        \n        statement : assignment\n        | if\n        | while\n        | for\n        | expr\n        | CONTINUE\n        | BREAK\n        \n        for : FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE\n        \n        params : NUMBER\n            |   NUMBER SEP NUMBER\n            | NUMBER SEP NUMBER SEP NUMBER\n        \n        while : WHILE expr COLON LBRACE statements RBRACE\n        \n        if : IF expr COLON LBRACE statements RBRACE elif\n        \n        elif : ELIF expr COLON LBRACE statements RBRACE elif\n        | else\n        \n        else : ELSE COLON LBRACE statements RBRACE\n        | empty\n        \n        assignment : ID EQ expr\n                   | ID PLUS_EQUAL expr\n                   | ID MINUS_EQUAL expr\n                   | ID TIMES_EQUAL expr\n        \n        expr : expr operator expr\n        | expr relop expr\n        | expr logic expr\n        | ID\n        | NUMBER\n        | TRUE\n        | FALSE\n        \n        operator : TIMES\n                | DIV\n                |  PLUS\n                |  MINUS\n                |  MOD\n        \n        logic : AND\n              | OR\n        \n        relop : LT\n                | LTE\n                |  GT\n                |  GTE\n                |  EQU\n                |  NEQU\n        \n        expr : LPRAN expr RPRAN\n        empty :'
    
_lr_action_items = {'CONTINUE':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,9,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,9,9,-45,-14,-15,-17,-19,-45,-45,-45,9,9,9,-18,-10,-45,-16,]),'BREAK':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,10,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,10,10,-45,-14,-15,-17,-19,-45,-45,-45,10,10,10,-18,-10,-45,-16,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,66,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,11,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,40,40,42,40,-28,-29,-30,40,40,40,-31,-32,-33,-34,-35,-38,-39,-40,-41,-42,-43,-36,-37,40,40,40,40,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,11,11,-45,-14,-15,40,-17,-19,-45,-45,-45,11,11,11,-18,-10,-45,-16,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,12,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,12,12,-45,-14,-15,-17,-19,-45,-45,-45,12,12,12,-18,-10,-45,-16,]),'WHILE':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,13,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,13,13,-45,-14,-15,-17,-19,-45,-45,-45,13,13,13,-18,-10,-45,-16,]),'FOR':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,14,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,14,14,-45,-14,-15,-17,-19,-45,-45,-45,14,14,14,-18,-10,-45,-16,]),'NUMBER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,54,55,56,58,59,60,61,62,65,66,67,69,71,77,78,79,80,81,82,84,85,86,87,88,],[-45,16,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,16,16,16,-28,-29,-30,16,16,16,-31,-32,-33,-34,-35,-38,-39,-40,-41,-42,-43,-36,-37,16,16,16,16,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,16,16,64,-45,-14,-15,16,-17,-19,75,-45,-45,83,-45,16,16,16,-18,-10,-45,-16,]),'TRUE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,66,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,17,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,17,17,17,-28,-29,-30,17,17,17,-31,-32,-33,-34,-35,-38,-39,-40,-41,-42,-43,-36,-37,17,17,17,17,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,17,17,-45,-14,-15,17,-17,-19,-45,-45,-45,17,17,17,-18,-10,-45,-16,]),'FALSE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,66,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,18,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,18,18,18,-28,-29,-30,18,18,18,-31,-32,-33,-34,-35,-38,-39,-40,-41,-42,-43,-36,-37,18,18,18,18,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,18,18,-45,-14,-15,18,-17,-19,-45,-45,-45,18,18,18,-18,-10,-45,-16,]),'LPRAN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,44,45,46,47,48,49,50,54,55,56,57,58,59,61,62,65,66,67,69,77,78,80,81,82,84,85,86,87,88,],[-45,15,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,15,15,15,-28,-29,-30,15,15,15,-31,-32,-33,-34,-35,-38,-39,-40,-41,-42,-43,-36,-37,15,15,15,15,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,60,15,15,-45,-14,-15,15,-17,-19,-45,-45,-45,15,15,15,-18,-10,-45,-16,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,61,62,65,67,69,85,86,87,88,],[-45,0,-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-14,-15,-17,-19,-18,-10,-45,-16,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,16,17,18,40,44,45,46,47,48,49,50,54,55,56,58,59,61,62,65,67,69,77,78,80,81,82,84,85,86,87,88,],[-2,-1,-3,-4,-5,-6,-7,-8,-9,-27,-28,-29,-30,-27,-24,-25,-26,-20,-21,-22,-23,-44,-45,-45,61,62,-45,-14,-15,-17,-19,-45,-45,-45,85,86,87,-18,-10,-45,-16,]),'TIMES':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[22,-27,-28,-29,-30,22,-27,22,22,22,22,22,22,22,22,22,-44,22,]),'DIV':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[23,-27,-28,-29,-30,23,-27,23,23,23,23,23,23,23,23,23,-44,23,]),'PLUS':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[24,-27,-28,-29,-30,24,-27,24,24,24,24,24,24,24,24,24,-44,24,]),'MINUS':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[25,-27,-28,-29,-30,25,-27,25,25,25,25,25,25,25,25,25,-44,25,]),'MOD':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[26,-27,-28,-29,-30,26,-27,26,26,26,26,26,26,26,26,26,-44,26,]),'LT':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[27,-27,-28,-29,-30,27,-27,27,27,27,27,27,27,27,27,27,-44,27,]),'LTE':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[28,-27,-28,-29,-30,28,-27,28,28,28,28,28,28,28,28,28,-44,28,]),'GT':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[29,-27,-28,-29,-30,29,-27,29,29,29,29,29,29,29,29,29,-44,29,]),'GTE':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[30,-27,-28,-29,-30,30,-27,30,30,30,30,30,30,30,30,30,-44,30,]),'EQU':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[31,-27,-28,-29,-30,31,-27,31,31,31,31,31,31,31,31,31,-44,31,]),'NEQU':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[32,-27,-28,-29,-30,32,-27,32,32,32,32,32,32,32,32,32,-44,32,]),'AND':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[33,-27,-28,-29,-30,33,-27,33,33,33,33,33,33,33,33,33,-44,33,]),'OR':([8,11,16,17,18,39,40,41,43,44,45,46,47,48,49,50,54,72,],[34,-27,-28,-29,-30,34,-27,34,34,34,34,34,34,34,34,34,-44,34,]),'EQ':([11,],[35,]),'PLUS_EQUAL':([11,],[36,]),'MINUS_EQUAL':([11,],[37,]),'TIMES_EQUAL':([11,],[38,]),'COLON':([16,17,18,39,40,41,44,45,46,54,68,70,72,],[-28,-29,-30,51,-27,52,-24,-25,-26,-44,73,74,76,]),'RPRAN':([16,17,18,40,43,44,45,46,54,63,64,75,83,],[-28,-29,-30,-27,54,-24,-25,-26,-44,70,-11,-12,-13,]),'IN':([42,],[53,]),'LBRACE':([51,52,73,74,76,],[55,56,77,78,80,]),'RANGE':([53,],[57,]),'ELIF':([61,87,],[66,66,]),'ELSE':([61,87,],[68,68,]),'SEP':([64,75,],[71,79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,55,56,77,78,80,],[1,58,59,81,82,84,]),'empty':([0,55,56,61,77,78,80,87,],[2,2,2,69,2,2,2,69,]),'statement':([1,58,59,81,82,84,],[3,3,3,3,3,3,]),'assignment':([1,58,59,81,82,84,],[4,4,4,4,4,4,]),'if':([1,58,59,81,82,84,],[5,5,5,5,5,5,]),'while':([1,58,59,81,82,84,],[6,6,6,6,6,6,]),'for':([1,58,59,81,82,84,],[7,7,7,7,7,7,]),'expr':([1,12,13,15,19,20,21,35,36,37,38,58,59,66,81,82,84,],[8,39,41,43,44,45,46,47,48,49,50,8,8,72,8,8,8,]),'operator':([8,39,41,43,44,45,46,47,48,49,50,72,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'relop':([8,39,41,43,44,45,46,47,48,49,50,72,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'logic':([8,39,41,43,44,45,46,47,48,49,50,72,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'params':([60,],[63,]),'elif':([61,87,],[65,88,]),'else':([61,87,],[67,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',23),
  ('statements -> empty','statements',1,'p_statements','parser.py',24),
  ('statement -> assignment','statement',1,'p_statement','parser.py',34),
  ('statement -> if','statement',1,'p_statement','parser.py',35),
  ('statement -> while','statement',1,'p_statement','parser.py',36),
  ('statement -> for','statement',1,'p_statement','parser.py',37),
  ('statement -> expr','statement',1,'p_statement','parser.py',38),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',39),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',40),
  ('for -> FOR ID IN RANGE LPRAN params RPRAN COLON LBRACE statements RBRACE','for',11,'p_for','parser.py',46),
  ('params -> NUMBER','params',1,'p_params','parser.py',52),
  ('params -> NUMBER SEP NUMBER','params',3,'p_params','parser.py',53),
  ('params -> NUMBER SEP NUMBER SEP NUMBER','params',5,'p_params','parser.py',54),
  ('while -> WHILE expr COLON LBRACE statements RBRACE','while',6,'p_while','parser.py',65),
  ('if -> IF expr COLON LBRACE statements RBRACE elif','if',7,'p_if','parser.py',71),
  ('elif -> ELIF expr COLON LBRACE statements RBRACE elif','elif',7,'p_elif','parser.py',77),
  ('elif -> else','elif',1,'p_elif','parser.py',78),
  ('else -> ELSE COLON LBRACE statements RBRACE','else',5,'p_else','parser.py',87),
  ('else -> empty','else',1,'p_else','parser.py',88),
  ('assignment -> ID EQ expr','assignment',3,'p_assignment','parser.py',95),
  ('assignment -> ID PLUS_EQUAL expr','assignment',3,'p_assignment','parser.py',96),
  ('assignment -> ID MINUS_EQUAL expr','assignment',3,'p_assignment','parser.py',97),
  ('assignment -> ID TIMES_EQUAL expr','assignment',3,'p_assignment','parser.py',98),
  ('expr -> expr operator expr','expr',3,'p_expr_operator_relop','parser.py',104),
  ('expr -> expr relop expr','expr',3,'p_expr_operator_relop','parser.py',105),
  ('expr -> expr logic expr','expr',3,'p_expr_operator_relop','parser.py',106),
  ('expr -> ID','expr',1,'p_expr_operator_relop','parser.py',107),
  ('expr -> NUMBER','expr',1,'p_expr_operator_relop','parser.py',108),
  ('expr -> TRUE','expr',1,'p_expr_operator_relop','parser.py',109),
  ('expr -> FALSE','expr',1,'p_expr_operator_relop','parser.py',110),
  ('operator -> TIMES','operator',1,'p_operator','parser.py',119),
  ('operator -> DIV','operator',1,'p_operator','parser.py',120),
  ('operator -> PLUS','operator',1,'p_operator','parser.py',121),
  ('operator -> MINUS','operator',1,'p_operator','parser.py',122),
  ('operator -> MOD','operator',1,'p_operator','parser.py',123),
  ('logic -> AND','logic',1,'p_logic','parser.py',129),
  ('logic -> OR','logic',1,'p_logic','parser.py',130),
  ('relop -> LT','relop',1,'p_relop','parser.py',136),
  ('relop -> LTE','relop',1,'p_relop','parser.py',137),
  ('relop -> GT','relop',1,'p_relop','parser.py',138),
  ('relop -> GTE','relop',1,'p_relop','parser.py',139),
  ('relop -> EQU','relop',1,'p_relop','parser.py',140),
  ('relop -> NEQU','relop',1,'p_relop','parser.py',141),
  ('expr -> LPRAN expr RPRAN','expr',3,'p_expr_pran','parser.py',147),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',152),
]
